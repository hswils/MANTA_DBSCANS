Starting IPS 0.8.1
Created <class 'fastran.driver.fastran_init.fastran_init'>
Created <class 'fastran.driver.fastran_driver.fastran_driver'>
Created <class 'fastran.equilibrium.efit.efit'>
Created <class 'fastran.solver.fastran.fastran'>
Created <class 'fastran.external.rf_ic_toric_abr_mcmd.toric'>
Created <class 'fastran.equilibrium.efit.efit'>
Created <class 'fastran.solver.fastran.fastran'>
IPS SLURM_NODES =  [('nid005274', 256)]
2025-07-25 11:48:56,965 FRAMEWORK       WARNING  RM: listOfNodes = [('nid005274', 128)]
2025-07-25 11:48:56,966 FRAMEWORK       WARNING  RM: max_ppn = 128 
2025-07-25 11:48:56,967 FRAMEWORK       WARNING  Using user set procs per node: 128
2025-07-25 11:48:56,967 FRAMEWORK       WARNING  RM: 1 nodes and 128 processors per node
2025-07-25 11:48:57,038 FWK_COMP_PortalBridge_9 WARNING  Missing USER_W3_DIR configuration - disabling web-visible logging
fastran_init.init() started
state_files: s000001.00001 g000001.00001 i000001.00001
create null s000001.00001
create null g000001.00001
create null i000001.00001
fastran_init.step() started
tokamak_id = FPP
shot_number = 000001
INPUT_DIR = /pscratch/sd/h/hswils/github_repos/ips-fastran-tutorial/MANTA/modeleq+toric/input
model_beam = 0
start dakota update
update_namelist called
instate_method: model
Shape from instate data array
ne from model profile, ped
te from model profile, ped
ti from model profile, ped
density_beam from model profile, parab
j_tot from model profile, parab
omega from model profile, parab
zeff from model profile, const
tbeami from model profile, const
density_alpha from model profile, zero
walpha from model profile, zero
wbeam from the model profile
density_model = 1: impurity = f*ne
init from instate: instate
usng analytic volume
end
rho_rad prad 100 100
integrated :  0.0
rho pohme 100 100
integrated :  0.0
Icurt=2.888e+00MA
rho_nbi pbe 100 100
integrated :  0.0
rho_nbi pbi 100 100
integrated :  0.0
rho_nbi sbedep 100 100
integrated :  0.0
rho_nbi tqbe 100 100
integrated :  0.0
Icurbeam=0.000e+00MA
rho_ecrf peech 100 100
integrated :  0.0
rho_icrf picrf_totals 6 100
integrated :  0.0
rho_icrf picrf_totals 6 100
integrated :  0.0
Icurech=0.000e+00MA
Icurich=0.000e+00MA
fastran_init.finalize() called
********************************************************************************
FASTRAN DIRVER INIT
PORTS (all) = ['INIT', 'DRIVER', 'EQ0', 'TR0', 'IC', 'EQ', 'TR']
PORTS = ['INIT', 'DRIVER', 'EQ0', 'TR0', 'IC', 'EQ', 'TR']
SIMULATION_MODE = NORMAL
*** t0 = 0
EQ0 init ********
>>> efit.init() started
INPUT: SCALE found 1 , mapped value =  enabled
INPUT: R0_SCALE found 1.7 , mapped value =  1.7
INPUT: B0_SCALE found 2.0 , mapped value =  2.0
efit time = 1
init_run =  1
force free
scaled  1.7 2.0
2025-07-25 11:48:57,585 FWK_COMP_PortalBridge_9 INFO     Run Portal URL = http://lb.ipsportal.production.svc.spin.nersc.org/77491
ps_update disabled
Icurt=2.862e+00MA
TR0 init ********
fastran.init() entered
IC init ********
toric.init() called
('touching ', 'torica.inp')
('touching ', 'machine.inp')
('touching ', 'log.toric')
('touching ', 'toric.nc')
('touching ', 'profstat.dat')
('touching ', 'equigs.data')
('touching ', 'equidt.data')
('touching ', 'toric_cfg.nc')
EQ init ********
>>> efit.init() started
INPUT: SCALE found 1 , mapped value =  enabled
INPUT: R0_SCALE found 1.7 , mapped value =  1.7
INPUT: B0_SCALE found 2.0 , mapped value =  2.0
efit time = 1
init_run =  0
TR init ********
fastran.init() entered
nstep_pre: 5

========================================================================
= fastran driver: preprocess iteration number =  0

EQ0 step
>>> efit.step() started
INPUT: PRESSURE found kinetic , mapped value =  kinetic
INPUT: RELAX_PROFILE not found, use default value: 0
INPUT: RELAX_METRIC not found, use default value: 0.5
INPUT: BETAN_TARGET not found, use default value: -1.0
model_pressure = kinetic
betan = 1.3472659332472012
INPUT: TOPOLOGY found DN , mapped value =  DN
INPUT: ERROR not found, use default value: 1.0e-4
INPUT: MAX_EFIT_ERROR not found, use default value: 0.1
init_run_step = 0
niter =  10
*** generate kfile 0
r0 = 4.55
b0 = 11.0
ip = 9999999.995
ip, ip cal, ip/(ip cal) = 10.000 2.863 3.493
weigting upper xpoint: [2, 3, 4, 5]
weigting lower xpoint: [9, 10, 11, 12]
run efit
efit, subprocess
elapsed time =  0.377  1.249
error_efit = 9.324e-05
*** generate kfile 1
apply underrelaxation
r0 = 4.55
b0 = 11.0
ip = 9999999.995
inmtric under-relax: 0.5
ip, ip cal, ip/(ip cal) = 10.000 2.830 3.534
weigting upper xpoint: [2, 3, 4, 5]
weigting lower xpoint: [9, 10, 11, 12]
diff_p = 0.1229778710362619
diff_f = 0.3592774637759022
run efit
efit, subprocess
elapsed time =  0.404  1.213
error_efit = 8.525e-05
*** generate kfile 2
apply underrelaxation
r0 = 4.55
b0 = 11.0
ip = 9999999.995
inmtric under-relax: 0.5
ip, ip cal, ip/(ip cal) = 10.000 2.800 3.571
weigting upper xpoint: [2, 3, 4, 5]
weigting lower xpoint: [9, 10, 11, 12]
diff_p = 0.11133309766353292
diff_f = 0.24240442731162323
run efit
efit, subprocess
elapsed time =  0.411  1.183
error_efit = 8.577e-05
*** generate kfile 3
apply underrelaxation
r0 = 4.55
b0 = 11.0
ip = 9999999.995
inmtric under-relax: 0.5
ip, ip cal, ip/(ip cal) = 10.000 2.775 3.603
weigting upper xpoint: [2, 3, 4, 5]
weigting lower xpoint: [9, 10, 11, 12]
diff_p = 0.07602265137146366
diff_f = 0.13650128352038976
run efit
efit, subprocess
elapsed time =  0.411  1.188
error_efit = 7.769e-05
*** generate kfile 4
apply underrelaxation
r0 = 4.55
b0 = 11.0
ip = 9999999.995
  ps_init_tag: Plasma State v2.055 f90 module initialization.
  %ps_update_fromxplasma: allocating nr,nz  =          129 ,         129
  %ps_update_fromxplasma: allocating nlim   =            5
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_nclass: allocating 16 Pfirsch-Schlutter moments profiles.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_update_fromxplasma: allocating nr,nz  =          129 ,         129
  %ps_update_fromxplasma: allocating nlim   =            5
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_nclass: allocating 16 Pfirsch-Schlutter moments profiles.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_update_fromxplasma: allocating nr,nz  =          129 ,         129
  %ps_update_fromxplasma: allocating nlim   =            5
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_nclass: allocating 16 Pfirsch-Schlutter moments profiles.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_update_fromxplasma: allocating nr,nz  =          129 ,         129
  %ps_update_fromxplasma: allocating nlim   =            5
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_nclass: allocating 16 Pfirsch-Schlutter moments profiles.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_update_fromxplasma: allocating nr,nz  =          129 ,         129
  %ps_update_fromxplasma: allocating nlim   =            5
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_nclass: allocating 16 Pfirsch-Schlutter moments profiles.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_update_fromxplasma: allocating nr,nz  =          129 ,         129
  %ps_update_fromxplasma: allocating nlim   =            5
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_nclass: allocating 16 Pfirsch-Schlutter moments profiles.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_update_fromxplasma: allocating nr,nz  =          129 ,         129
  %ps_update_fromxplasma: allocating nlim   =            5
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_nclass: allocating 16 Pfirsch-Schlutter moments profiles.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
inmtric under-relax: 0.5
ip, ip cal, ip/(ip cal) = 10.000 2.756 3.628
weigting upper xpoint: [2, 3, 4, 5]
weigting lower xpoint: [9, 10, 11, 12]
diff_p = 0.045351184374253777
diff_f = 0.07409632150113268
run efit
efit, subprocess
elapsed time =  0.421  1.185
error_efit = 7.591e-05
*** generate kfile 5
apply underrelaxation
r0 = 4.55
b0 = 11.0
ip = 9999999.995
inmtric under-relax: 0.5
ip, ip cal, ip/(ip cal) = 10.000 2.743 3.646
weigting upper xpoint: [2, 3, 4, 5]
weigting lower xpoint: [9, 10, 11, 12]
diff_p = 0.024817054353116055
diff_f = 0.03940025237727242
run efit
efit, subprocess
elapsed time =  0.419  1.173
error_efit = 7.21e-05
*** generate kfile 6
apply underrelaxation
r0 = 4.55
b0 = 11.0
ip = 9999999.995
inmtric under-relax: 0.5
ip, ip cal, ip/(ip cal) = 10.000 2.734 3.658
weigting upper xpoint: [2, 3, 4, 5]
weigting lower xpoint: [9, 10, 11, 12]
diff_p = 0.012728784483185237
diff_f = 0.020567544917280398
run efit
efit, subprocess
elapsed time =  0.423  1.157
error_efit = 9.738e-05
*** generate kfile 7
apply underrelaxation
r0 = 4.55
b0 = 11.0
ip = 9999999.995
inmtric under-relax: 0.5
ip, ip cal, ip/(ip cal) = 10.000 2.729 3.665
weigting upper xpoint: [2, 3, 4, 5]
weigting lower xpoint: [9, 10, 11, 12]
diff_p = 0.006235637010820363
diff_f = 0.010587520261905807
run efit
efit, subprocess
elapsed time =  0.418  1.169
error_efit = 8.386e-05
*** generate kfile 8
apply underrelaxation
r0 = 4.55
b0 = 11.0
ip = 9999999.995
inmtric under-relax: 0.5
ip, ip cal, ip/(ip cal) = 10.000 2.725 3.669
weigting upper xpoint: [2, 3, 4, 5]
weigting lower xpoint: [9, 10, 11, 12]
diff_p = 0.0029558766267090237
diff_f = 0.0054133120656315245
converged
Icurt=2.722e+00MA
EQ0 step finished
TR0 step
fastran.step() entered
update_next = disabled
update_instate =  True
[1, 1, 36]
['D', 'T', 'Kr']
ion D
ion T
imp Kr
model_beam = 0
dump_vol_profile : rho_nbi pbe 0.0
dump_vol_profile : rho_nbi pbi 0.0
dump_vol_profile : rho_nbi pbth 0.0
dump_vol_profile : rho_nbi pbth 0.0
dump_vol_profile : rho_fus pfuse 0.0
dump_vol_profile : rho_fus pfusi 0.0
dump_vol_profile : rho_fus pfusth 0.0
dump_vol_profile : rho_ecrf peech 0.0
dump_vol_profile : rho_icrf picrf_totals 0.0
dump_vol_profile : rho_lhrf pelh 0.0
S_name =  ['e                               ' 'D                               '
 'T                               ' 'Kr                              ']
0 e                               
1 D                               
processing 1 D                               
dump_vol_profile : rho_icrf picrf_totals 0.0
2 T                               
processing 2 T                               
dump_vol_profile : rho_icrf picrf_totals 0.0
3 Kr                              
processing 3 Kr                              
dump_vol_profile : rho_icrf picrf_totals 0.0
dump_vol_profile : rho_lhrf pilh 0.0
dump_vol_profile : rho_nbi tqbe 0.0
dump_vol_profile : rho_nbi tqbi 0.0
dump_vol_profile : rho_nbi tqbjxb 0.0
dump_vol_profile : rho_nbi tqbth 0.0
dump_vol_profile : rho_nbi sbedep 0.0
dump_vol_profile : rho_nbi sbehalo 0.0
dump_vol_profile : rho sn_trans 0.0
dump_vol_profile : rho_rad prad 0.0
dump_vol_profile : rho pohme 0.0
/global/common/software/atom/perlmutter/binaries/fastran/default/xfastran_ver1.00_ser
ncpu =  1
n1d  =  1
nky  =  1
[1, 1, 36]
['D', 'T', 'Kr']
ion D
ion T
imp Kr
nspec_th = 3
Icurt=1.000e+01MA
Icurr_bootstrap=1.979e+00MA
Icurr_ohmic=0.000e+00MA
rho_fus pfuse 100 100
integrated :  57360420.362735756
rho_fus pfusi 100 100
integrated :  18404717.819088932
model_beam = 0
density_model = 1: impurity = f*ne
TR0 step finished

========================================================================
= fastran driver: preprocess iteration number =  1

EQ0 step
>>> efit.step() started
INPUT: PRESSURE found kinetic , mapped value =  kinetic
INPUT: RELAX_PROFILE not found, use default value: 0
INPUT: RELAX_METRIC not found, use default value: 0.5
INPUT: BETAN_TARGET not found, use default value: -1.0
model_pressure = kinetic
betan = 1.3320937158706243
INPUT: TOPOLOGY found DN , mapped value =  DN
INPUT: ERROR not found, use default value: 1.0e-4
INPUT: MAX_EFIT_ERROR not found, use default value: 0.1
init_run_step = 0
niter =  10
*** generate kfile 0
r0 = 4.55
b0 = 11.0
ip = 9999999.995
ip, ip cal, ip/(ip cal) = 10.000 10.002 1.000
weigting upper xpoint: [2, 3, 4, 5]
weigting lower xpoint: [9, 10, 11, 12]
run efit
efit, subprocess
elapsed time =  0.328  1.168
error_efit = 8.728e-05
*** generate kfile 1
apply underrelaxation
r0 = 4.55
b0 = 11.0
ip = 9999999.995
  %ps_update_fromxplasma: allocating nr,nz  =          129 ,         129
  %ps_update_fromxplasma: allocating nlim   =            5
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_nclass: allocating 16 Pfirsch-Schlutter moments profiles.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_update_fromxplasma: allocating nr,nz  =          129 ,         129
  %ps_update_fromxplasma: allocating nlim   =            5
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_nclass: allocating 16 Pfirsch-Schlutter moments profiles.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_update_fromxplasma: allocating nr,nz  =          129 ,         129
  %ps_update_fromxplasma: allocating nlim   =            5
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_nclass: allocating 16 Pfirsch-Schlutter moments profiles.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_update_fromxplasma: allocating nr,nz  =          129 ,         129
  %ps_update_fromxplasma: allocating nlim   =            5
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_nclass: allocating 16 Pfirsch-Schlutter moments profiles.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_update_fromxplasma: allocating nr,nz  =          129 ,         129
  %ps_update_fromxplasma: allocating nlim   =            5
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_nclass: allocating 16 Pfirsch-Schlutter moments profiles.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_update_fromxplasma: allocating nr,nz  =          129 ,         129
  %ps_update_fromxplasma: allocating nlim   =            5
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_nclass: allocating 16 Pfirsch-Schlutter moments profiles.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_update_fromxplasma: allocating nr,nz  =          129 ,         129
  %ps_update_fromxplasma: allocating nlim   =            5
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
inmtric under-relax: 0.5
ip, ip cal, ip/(ip cal) = 10.000 10.000 1.000
weigting upper xpoint: [2, 3, 4, 5]
weigting lower xpoint: [9, 10, 11, 12]
diff_p = 9.640233861127871e-05
diff_f = 4.766706484583423e-05
converged
Icurt=9.998e+00MA
EQ0 step finished
TR0 step
fastran.step() entered
update_next = disabled
update_instate =  True
[1, 1, 36]
['D', 'T', 'Kr']
ion D
ion T
imp Kr
model_beam = 0
dump_vol_profile : rho_nbi pbe 0.0
dump_vol_profile : rho_nbi pbi 0.0
dump_vol_profile : rho_nbi pbth 0.0
dump_vol_profile : rho_nbi pbth 0.0
dump_vol_profile : rho_fus pfuse 57360420.362735756
dump_vol_profile : rho_fus pfusi 18404717.819088932
dump_vol_profile : rho_fus pfusth 0.0
dump_vol_profile : rho_ecrf peech 0.0
dump_vol_profile : rho_icrf picrf_totals 0.0
dump_vol_profile : rho_lhrf pelh 0.0
S_name =  ['e                               ' 'D                               '
 'T                               ' 'Kr                              ']
0 e                               
1 D                               
processing 1 D                               
dump_vol_profile : rho_icrf picrf_totals 0.0
2 T                               
processing 2 T                               
dump_vol_profile : rho_icrf picrf_totals 0.0
3 Kr                              
processing 3 Kr                              
dump_vol_profile : rho_icrf picrf_totals 0.0
dump_vol_profile : rho_lhrf pilh 0.0
dump_vol_profile : rho_nbi tqbe 0.0
dump_vol_profile : rho_nbi tqbi 0.0
dump_vol_profile : rho_nbi tqbjxb 0.0
dump_vol_profile : rho_nbi tqbth 0.0
dump_vol_profile : rho_nbi sbedep 0.0
dump_vol_profile : rho_nbi sbehalo 0.0
dump_vol_profile : rho sn_trans 0.0
dump_vol_profile : rho_rad prad 0.0
dump_vol_profile : rho pohme 0.0
/global/common/software/atom/perlmutter/binaries/fastran/default/xfastran_ver1.00_ser
ncpu =  1
n1d  =  1
nky  =  1
[1, 1, 36]
['D', 'T', 'Kr']
ion D
ion T
imp Kr
nspec_th = 3
Icurt=1.000e+01MA
Icurr_bootstrap=1.975e+00MA
Icurr_ohmic=0.000e+00MA
rho_fus pfuse 100 100
integrated :  56843669.60692565
rho_fus pfusi 100 100
integrated :  18182424.12503105
model_beam = 0
density_model = 1: impurity = f*ne
TR0 step finished

========================================================================
= fastran driver: preprocess iteration number =  2

EQ0 step
>>> efit.step() started
INPUT: PRESSURE found kinetic , mapped value =  kinetic
INPUT: RELAX_PROFILE not found, use default value: 0
INPUT: RELAX_METRIC not found, use default value: 0.5
INPUT: BETAN_TARGET not found, use default value: -1.0
model_pressure = kinetic
betan = 1.3285688082081903
INPUT: TOPOLOGY found DN , mapped value =  DN
INPUT: ERROR not found, use default value: 1.0e-4
INPUT: MAX_EFIT_ERROR not found, use default value: 0.1
init_run_step = 0
niter =  10
*** generate kfile 0
r0 = 4.55
b0 = 11.0
ip = 9999999.995
ip, ip cal, ip/(ip cal) = 10.000 10.003 1.000
weigting upper xpoint: [2, 3, 4, 5]
weigting lower xpoint: [9, 10, 11, 12]
run efit
efit, subprocess
elapsed time =  0.327  1.161
error_efit = 7.34e-05
*** generate kfile 1
apply underrelaxation
r0 = 4.55
b0 = 11.0
ip = 9999999.995
inmtric under-relax: 0.5
ip, ip cal, ip/(ip cal) = 10.000 10.002 1.000
weigting upper xpoint: [2, 3, 4, 5]
weigting lower xpoint: [9, 10, 11, 12]
diff_p = 8.190180525818938e-05
diff_f = 5.148716248303611e-05
converged
Icurt=1.000e+01MA
EQ0 step finished
TR0 step
fastran.step() entered
update_next = disabled
update_instate =  True
[1, 1, 36]
['D', 'T', 'Kr']
ion D
ion T
imp Kr
model_beam = 0
dump_vol_profile : rho_nbi pbe 0.0
dump_vol_profile : rho_nbi pbi 0.0
dump_vol_profile : rho_nbi pbth 0.0
dump_vol_profile : rho_nbi pbth 0.0
dump_vol_profile : rho_fus pfuse 56843669.60692565
dump_vol_profile : rho_fus pfusi 18182424.12503105
dump_vol_profile : rho_fus pfusth 0.0
dump_vol_profile : rho_ecrf peech 0.0
dump_vol_profile : rho_icrf picrf_totals 0.0
dump_vol_profile : rho_lhrf pelh 0.0
S_name =  ['e                               ' 'D                               '
 'T                               ' 'Kr                              ']
0 e                               
1 D                               
processing 1 D                               
dump_vol_profile : rho_icrf picrf_totals 0.0
2 T                               
processing 2 T                               
dump_vol_profile : rho_icrf picrf_totals 0.0
3 Kr                              
processing 3 Kr                              
dump_vol_profile : rho_icrf picrf_totals 0.0
dump_vol_profile : rho_lhrf pilh 0.0
dump_vol_profile : rho_nbi tqbe 0.0
dump_vol_profile : rho_nbi tqbi 0.0
dump_vol_profile : rho_nbi tqbjxb 0.0
dump_vol_profile : rho_nbi tqbth 0.0
dump_vol_profile : rho_nbi sbedep 0.0
dump_vol_profile : rho_nbi sbehalo 0.0
dump_vol_profile : rho sn_trans 0.0
dump_vol_profile : rho_rad prad 0.0
dump_vol_profile : rho pohme 0.0
/global/common/software/atom/perlmutter/binaries/fastran/default/xfastran_ver1.00_ser
ncpu =  1
n1d  =  1
nky  =  1
[1, 1, 36]
['D', 'T', 'Kr']
ion D
ion T
imp Kr
nspec_th = 3
Icurt=1.000e+01MA
Icurr_bootstrap=1.971e+00MA
Icurr_ohmic=0.000e+00MA
rho_fus pfuse 100 100
integrated :  56354231.70885748
rho_fus pfusi 100 100
integrated :  17970604.54732326
model_beam = 0
density_model = 1: impurity = f*ne
TR0 step finished

========================================================================
= fastran driver: preprocess iteration number =  3

EQ0 step
>>> efit.step() started
INPUT: PRESSURE found kinetic , mapped value =  kinetic
INPUT: RELAX_PROFILE not found, use default value: 0
INPUT: RELAX_METRIC not found, use default value: 0.5
INPUT: BETAN_TARGET not found, use default value: -1.0
model_pressure = kinetic
betan = 1.3252846395049458
INPUT: TOPOLOGY found DN , mapped value =  DN
INPUT: ERROR not found, use default value: 1.0e-4
INPUT: MAX_EFIT_ERROR not found, use default value: 0.1
init_run_step = 0
niter =  10
*** generate kfile 0
r0 = 4.55
b0 = 11.0
ip = 9999999.995
ip, ip cal, ip/(ip cal) = 10.000 10.003 1.000
weigting upper xpoint: [2, 3, 4, 5]
weigting lower xpoint: [9, 10, 11, 12]
run efit
efit, subprocess
elapsed time =  0.327  1.183
error_efit = 7.454e-05
*** generate kfile 1
apply underrelaxation
r0 = 4.55
b0 = 11.0
ip = 9999999.995
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_nclass: allocating 16 Pfirsch-Schlutter moments profiles.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_update_fromxplasma: allocating nr,nz  =          129 ,         129
  %ps_update_fromxplasma: allocating nlim   =            5
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_nclass: allocating 16 Pfirsch-Schlutter moments profiles.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_update_fromxplasma: allocating nr,nz  =          129 ,         129
  %ps_update_fromxplasma: allocating nlim   =            5
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_nclass: allocating 16 Pfirsch-Schlutter moments profiles.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_update_fromxplasma: allocating nr,nz  =          129 ,         129
  %ps_update_fromxplasma: allocating nlim   =            5
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_nclass: allocating 16 Pfirsch-Schlutter moments profiles.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_update_fromxplasma: allocating nr,nz  =          129 ,         129
  %ps_update_fromxplasma: allocating nlim   =            5
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_nclass: allocating 16 Pfirsch-Schlutter moments profiles.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_update_fromxplasma: allocating nr,nz  =          129 ,         129
  %ps_update_fromxplasma: allocating nlim   =            5
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_nclass: allocating 16 Pfirsch-Schlutter moments profiles.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_update_fromxplasma: allocating nr,nz  =          129 ,         129
  %ps_update_fromxplasma: allocating nlim   =            5
inmtric under-relax: 0.5
ip, ip cal, ip/(ip cal) = 10.000 10.002 1.000
weigting upper xpoint: [2, 3, 4, 5]
weigting lower xpoint: [9, 10, 11, 12]
diff_p = 5.564213528378327e-05
diff_f = 4.227778995432821e-05
converged
Icurt=1.000e+01MA
EQ0 step finished
TR0 step
fastran.step() entered
update_next = disabled
update_instate =  True
[1, 1, 36]
['D', 'T', 'Kr']
ion D
ion T
imp Kr
model_beam = 0
dump_vol_profile : rho_nbi pbe 0.0
dump_vol_profile : rho_nbi pbi 0.0
dump_vol_profile : rho_nbi pbth 0.0
dump_vol_profile : rho_nbi pbth 0.0
dump_vol_profile : rho_fus pfuse 56354231.70885748
dump_vol_profile : rho_fus pfusi 17970604.54732326
dump_vol_profile : rho_fus pfusth 0.0
dump_vol_profile : rho_ecrf peech 0.0
dump_vol_profile : rho_icrf picrf_totals 0.0
dump_vol_profile : rho_lhrf pelh 0.0
S_name =  ['e                               ' 'D                               '
 'T                               ' 'Kr                              ']
0 e                               
1 D                               
processing 1 D                               
dump_vol_profile : rho_icrf picrf_totals 0.0
2 T                               
processing 2 T                               
dump_vol_profile : rho_icrf picrf_totals 0.0
3 Kr                              
processing 3 Kr                              
dump_vol_profile : rho_icrf picrf_totals 0.0
dump_vol_profile : rho_lhrf pilh 0.0
dump_vol_profile : rho_nbi tqbe 0.0
dump_vol_profile : rho_nbi tqbi 0.0
dump_vol_profile : rho_nbi tqbjxb 0.0
dump_vol_profile : rho_nbi tqbth 0.0
dump_vol_profile : rho_nbi sbedep 0.0
dump_vol_profile : rho_nbi sbehalo 0.0
dump_vol_profile : rho sn_trans 0.0
dump_vol_profile : rho_rad prad 0.0
dump_vol_profile : rho pohme 0.0
/global/common/software/atom/perlmutter/binaries/fastran/default/xfastran_ver1.00_ser
ncpu =  1
n1d  =  1
nky  =  1
[1, 1, 36]
['D', 'T', 'Kr']
ion D
ion T
imp Kr
nspec_th = 3
Icurt=1.000e+01MA
Icurr_bootstrap=1.967e+00MA
Icurr_ohmic=0.000e+00MA
rho_fus pfuse 100 100
integrated :  55863469.46661974
rho_fus pfusi 100 100
integrated :  17759676.030028597
model_beam = 0
density_model = 1: impurity = f*ne
TR0 step finished

========================================================================
= fastran driver: preprocess iteration number =  4

EQ0 step
>>> efit.step() started
INPUT: PRESSURE found kinetic , mapped value =  kinetic
INPUT: RELAX_PROFILE not found, use default value: 0
INPUT: RELAX_METRIC not found, use default value: 0.5
INPUT: BETAN_TARGET not found, use default value: -1.0
model_pressure = kinetic
betan = 1.322020920927721
INPUT: TOPOLOGY found DN , mapped value =  DN
INPUT: ERROR not found, use default value: 1.0e-4
INPUT: MAX_EFIT_ERROR not found, use default value: 0.1
init_run_step = 0
niter =  10
*** generate kfile 0
r0 = 4.55
b0 = 11.0
ip = 9999999.995
ip, ip cal, ip/(ip cal) = 10.000 10.003 1.000
weigting upper xpoint: [2, 3, 4, 5]
weigting lower xpoint: [9, 10, 11, 12]
run efit
efit, subprocess
elapsed time =  0.328  1.179
error_efit = 7.784e-05
*** generate kfile 1
apply underrelaxation
r0 = 4.55
b0 = 11.0
ip = 9999999.995
inmtric under-relax: 0.5
ip, ip cal, ip/(ip cal) = 10.000 10.002 1.000
weigting upper xpoint: [2, 3, 4, 5]
weigting lower xpoint: [9, 10, 11, 12]
diff_p = 8.877046575656911e-05
diff_f = 5.496969646065965e-05
converged
Icurt=1.000e+01MA
EQ0 step finished
TR0 step
fastran.step() entered
update_next = disabled
update_instate =  True
[1, 1, 36]
['D', 'T', 'Kr']
ion D
ion T
imp Kr
model_beam = 0
dump_vol_profile : rho_nbi pbe 0.0
dump_vol_profile : rho_nbi pbi 0.0
dump_vol_profile : rho_nbi pbth 0.0
dump_vol_profile : rho_nbi pbth 0.0
dump_vol_profile : rho_fus pfuse 55863469.46661974
dump_vol_profile : rho_fus pfusi 17759676.030028597
dump_vol_profile : rho_fus pfusth 0.0
dump_vol_profile : rho_ecrf peech 0.0
dump_vol_profile : rho_icrf picrf_totals 0.0
dump_vol_profile : rho_lhrf pelh 0.0
S_name =  ['e                               ' 'D                               '
 'T                               ' 'Kr                              ']
0 e                               
1 D                               
processing 1 D                               
dump_vol_profile : rho_icrf picrf_totals 0.0
2 T                               
processing 2 T                               
dump_vol_profile : rho_icrf picrf_totals 0.0
3 Kr                              
processing 3 Kr                              
dump_vol_profile : rho_icrf picrf_totals 0.0
dump_vol_profile : rho_lhrf pilh 0.0
dump_vol_profile : rho_nbi tqbe 0.0
dump_vol_profile : rho_nbi tqbi 0.0
dump_vol_profile : rho_nbi tqbjxb 0.0
dump_vol_profile : rho_nbi tqbth 0.0
dump_vol_profile : rho_nbi sbedep 0.0
dump_vol_profile : rho_nbi sbehalo 0.0
dump_vol_profile : rho sn_trans 0.0
dump_vol_profile : rho_rad prad 0.0
dump_vol_profile : rho pohme 0.0
/global/common/software/atom/perlmutter/binaries/fastran/default/xfastran_ver1.00_ser
ncpu =  1
n1d  =  1
nky  =  1
[1, 1, 36]
['D', 'T', 'Kr']
ion D
ion T
imp Kr
nspec_th = 3
Icurt=1.000e+01MA
Icurr_bootstrap=1.964e+00MA
Icurr_ohmic=0.000e+00MA
rho_fus pfuse 100 100
integrated :  55384848.42650202
rho_fus pfusi 100 100
integrated :  17553890.831538014
model_beam = 0
density_model = 1: impurity = f*ne
TR0 step finished
number of iteration : 10

========================================================================
= fastran driver: iteration number =  0

IC step
toric.step() called
cur_state_file =  s000001.00001
('Total IC power = ', 40000000.0)
power =  40000000.0
 using s000001.00001 as default state.
  ps_init_tag: Plasma State v2.055 f90 module initialization.
 Prepare toric input reading machine.inp
 ps%ns(1,0)   2.7623067349999999E+020
 <n_e(m-3)-PS> =   1.8571391859137934E+020
 <n_e(m-3)-Interpolated> =   1.8655276254143149E+020
 Thermal ion name, A, Z, dens, temp = 
 D           2           1   1.2930386015739306E+020   19.016966080000000     
 Thermal ion name, A, Z, dens, temp = 
 T           3           1   1.2930386015739306E+020   19.016966080000000     
 Thermal ion name, A, Z, dens, temp = 
 Kr          83          36   4.8952647736705203E+017   19.016966080000000     
 Fast ion name, A, Z = D_beam           2           1
 Fast ion name, A, Z = He4_fusn           4           2
('prepare_eqdsk', '/global/common/software/atom/perlmutter/binaries/geqxpl/default/geqxpl', 'g000001.00001')
  
  G-EQdsk data accepted, maximum rel. GS error:    7.3898133548756387E-003
  
  Bphi is counter-clockwise viewed from above (nsnccwb = 1)
  
  Jphi is counter-clockwise viewed from above (nsnccwi = 1)
  
 equigs_write completion code (0=normal):           0
('toric processors = ', '24')
  -- get (restore) plasma state from file -- 
 process_toric_output: cur_state_file = s000001.00001
  ps_init_tag: Plasma State v2.055 f90 module initialization.
 freq_ic, picrf  alloc? T T
 RF alloc? T         600
    number of icrf sources =            1
    number of species =            5           3
 process toric output: profile and spec sizes:
 toric mesh, PS mesh         459         101
 toric species, PS species counts           5           3
 powers in percent
 total:   100.00000000000001     
 electron total   27.700861139754686        4.3371232660999404     
 ion totals fundamental   2.0503112293762416E-004   0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000     
 ion totals harmonic   0.0000000000000000        67.961810563022453        0.0000000000000000        0.0000000000000000        0.0000000000000000     
    number of thermal species (ps%nspec_th) =            3
    number of icrf sources (ps%nicrf_src) =            1
 ps%freq_ic =    0.0000000000000000     
 ps%icrf_src_name = IC00                            
 ps%power_ic =    40000000.000000000     
 ICRF Power   40000000.000000000     
   --storing toric data in current plasma state
 Total FW Driven Current (A)   206472.53662152073     
 Total ICRF Power (W)   40000000.000000000     
 FWCD Effciency (A/W)   5.1618134155380184E-003
 Total FW Driven Current from each source-> Interpolated (A)   206472.53662152067     
 Total FW Driven Current from all sources -> Interpolated (A)   206472.53662152067     
  *ps_update_file_write: normal exit,            6  update elements written.
 Stored Partial RF Plasma State
 electron power, integral
   12814958.473849507      Watts
 FW ion power, integral
   27185041.526150215      Watts
error but neglected...
IC step finished
EQ step
>>> efit.step() started
INPUT: PRESSURE found kinetic , mapped value =  kinetic
INPUT: RELAX_PROFILE not found, use default value: 0
INPUT: RELAX_METRIC not found, use default value: 0.5
INPUT: BETAN_TARGET not found, use default value: -1.0
model_pressure = kinetic
betan = 1.3187901321599604
INPUT: TOPOLOGY found DN , mapped value =  DN
INPUT: ERROR not found, use default value: 1.0e-4
INPUT: MAX_EFIT_ERROR not found, use default value: 0.1
init_run_step = 0
niter =  10
*** generate kfile 0
r0 = 4.55
b0 = 11.0
ip = 9999999.995
ip, ip cal, ip/(ip cal) = 10.000 10.003 1.000
weigting upper xpoint: [2, 3, 4, 5]
weigting lower xpoint: [9, 10, 11, 12]
run efit
efit, subprocess
elapsed time =  0.359  1.195
error_efit = 8.581e-05
*** generate kfile 1
apply underrelaxation
r0 = 4.55
b0 = 11.0
ip = 9999999.995
inmtric under-relax: 0.5
ip, ip cal, ip/(ip cal) = 10.000 10.002 1.000
weigting upper xpoint: [2, 3, 4, 5]
weigting lower xpoint: [9, 10, 11, 12]
diff_p = 9.113809135979369e-05
diff_f = 6.157555052954856e-05
converged
Icurt=1.000e+01MA
EQ step finished
TR step
fastran.step() entered
update_next = disabled
update_instate =  True
[1, 1, 36]
['D', 'T', 'Kr']
ion D
ion T
imp Kr
model_beam = 0
dump_vol_profile : rho_nbi pbe 0.0
dump_vol_profile : rho_nbi pbi 0.0
dump_vol_profile : rho_nbi pbth 0.0
dump_vol_profile : rho_nbi pbth 0.0
dump_vol_profile : rho_fus pfuse 55384848.42650202
dump_vol_profile : rho_fus pfusi 17553890.831538014
dump_vol_profile : rho_fus pfusth 0.0
dump_vol_profile : rho_ecrf peech 0.0
dump_vol_profile : rho_icrf picrf_totals 12814958.473849507
dump_vol_profile : rho_lhrf pelh 0.0
S_name =  ['e                               ' 'D                               '
 'T                               ' 'Kr                              ']
0 e                               
1 D                               
processing 1 D                               
dump_vol_profile : rho_icrf picrf_totals 187.42113284160038
2 T                               
processing 2 T                               
dump_vol_profile : rho_icrf picrf_totals 27184854.105017364
3 Kr                              
processing 3 Kr                              
dump_vol_profile : rho_icrf picrf_totals 0.0
dump_vol_profile : rho_lhrf pilh 0.0
dump_vol_profile : rho_nbi tqbe 0.0
dump_vol_profile : rho_nbi tqbi 0.0
dump_vol_profile : rho_nbi tqbjxb 0.0
dump_vol_profile : rho_nbi tqbth 0.0
dump_vol_profile : rho_nbi sbedep 0.0
dump_vol_profile : rho_nbi sbehalo 0.0
dump_vol_profile : rho sn_trans 0.0
dump_vol_profile : rho_rad prad 0.0
dump_vol_profile : rho pohme 0.0
/global/common/software/atom/perlmutter/binaries/fastran/default/xfastran_ver1.00_ser
ncpu =  1
n1d  =  1
nky  =  1
[1, 1, 36]
['D', 'T', 'Kr']
ion D
ion T
imp Kr
nspec_th = 3
Icurt=1.000e+01MA
Icurr_bootstrap=1.728e+00MA
Icurr_ohmic=0.000e+00MA
rho_fus pfuse 100 100
integrated :  43354187.020991534
rho_fus pfusi 100 100
integrated :  14383163.59042823
model_beam = 0
density_model = 1: impurity = f*ne
TR step finished

========================================================================
= fastran driver: iteration number =  1

IC step
toric.step() called
cur_state_file =  s000001.00001
('Total IC power = ', 40000000.0)
power =  40000000.0
 using s000001.00001 as default state.
  ps_init_tag: Plasma State v2.055 f90 module initialization.
 Prepare toric input reading machine.inp
 ps%ns(1,0)   2.7623067349999999E+020
 <n_e(m-3)-PS> =   1.8570437148122209E+020
 <n_e(m-3)-Interpolated> =   1.8655149064776683E+020
 Thermal ion name, A, Z, dens, temp = 
 D           2           1   1.2844672644381124E+020   19.763961723967562     
 Thermal ion name, A, Z, dens, temp = 
 T           3           1   1.2844672644381124E+020   19.763961723967562     
 Thermal ion name, A, Z, dens, temp = 
 Kr          83          36   5.3714501701048512E+017   19.763961723967562     
 Fast ion name, A, Z = D_beam           2           1
 Fast ion name, A, Z = He4_fusn           4           2
('prepare_eqdsk', '/global/common/software/atom/perlmutter/binaries/geqxpl/default/geqxpl', 'g000001.00001')
  
  G-EQdsk data accepted, maximum rel. GS error:    7.1760913616772549E-003
  
  Bphi is counter-clockwise viewed from above (nsnccwb = 1)
  
  Jphi is counter-clockwise viewed from above (nsnccwi = 1)
  
 equigs_write completion code (0=normal):           0
('toric processors = ', '24')
  -- get (restore) plasma state from file -- 
 process_toric_output: cur_state_file = s000001.00001
  ps_init_tag: Plasma State v2.055 f90 module initialization.
 freq_ic, picrf  alloc? T T
 RF alloc? T         600
    number of icrf sources =            1
    number of species =            5           3
 process toric output: profile and spec sizes:
 toric mesh, PS mesh         459         101
 toric species, PS species counts           5           3
 powers in percent
 total:   99.999999999999986     
 electron total   27.236216916139572        4.3638983355688277     
 ion totals fundamental   2.1105365425514306E-004   0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000     
 ion totals harmonic   0.0000000000000000        68.399673694637329        0.0000000000000000        0.0000000000000000        0.0000000000000000     
    number of thermal species (ps%nspec_th) =            3
    number of icrf sources (ps%nicrf_src) =            1
 ps%freq_ic =    0.0000000000000000     
 ps%icrf_src_name = IC00                            
 ps%power_ic =    40000000.000000000     
 ICRF Power   40000000.000000000     
   --storing toric data in current plasma state
 Total FW Driven Current (A)   194848.44601229765     
 Total ICRF Power (W)   40000000.000000000     
 FWCD Effciency (A/W)   4.8712111503074413E-003
 Total FW Driven Current from each source-> Interpolated (A)   194848.44601229773     
 Total FW Driven Current from all sources -> Interpolated (A)   194848.44601229773     
  *ps_update_file_write: normal exit,            5  update elements written.
 Stored Partial RF Plasma State
 electron power, integral
   12640780.035184592      Watts
 FW ion power, integral
   27359219.964815162      Watts
('merged TORIC plasma state data ', '/pscratch/sd/h/hswils/github_repos/ips-fastran-tutorial/MANTA/modeleq+toric/SCAN/work/rf_ic_toric_5/RF_IC_s000001.00001')
IC step finished
EQ step
>>> efit.step() started
INPUT: PRESSURE found kinetic , mapped value =  kinetic
INPUT: RELAX_PROFILE not found, use default value: 0
INPUT: RELAX_METRIC not found, use default value: 0.5
INPUT: BETAN_TARGET not found, use default value: -1.0
model_pressure = kinetic
betan = 1.2639855291273765
INPUT: TOPOLOGY found DN , mapped value =  DN
INPUT: ERROR not found, use default value: 1.0e-4
INPUT: MAX_EFIT_ERROR not found, use default value: 0.1
init_run_step = 0
niter =  10
*** generate kfile 0
r0 = 4.55
b0 = 11.0
ip = 9999999.995
ip, ip cal, ip/(ip cal) = 10.000 10.003 1.000
weigting upper xpoint: [2, 3, 4, 5]
weigting lower xpoint: [9, 10, 11, 12]
run efit
efit, subprocess
elapsed time =  0.329  1.392
error_efit = 7.121e-05
*** generate kfile 1
apply underrelaxation
r0 = 4.55
b0 = 11.0
ip = 9999999.995
inmtric under-relax: 0.5
ip, ip cal, ip/(ip cal) = 10.000 9.993 1.001
weigting upper xpoint: [2, 3, 4, 5]
weigting lower xpoint: [9, 10, 11, 12]
diff_p = 0.0001318341025867178
diff_f = 0.000712040194360141
converged
  ps_init_tag: Plasma State v2.055 f90 module initialization.
  %ps_update_fromxplasma: allocating nr,nz  =          129 ,         129
  %ps_update_fromxplasma: allocating nlim   =            5
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_nclass: allocating 16 Pfirsch-Schlutter moments profiles.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_update_fromxplasma: allocating nr,nz  =          129 ,         129
  %ps_update_fromxplasma: allocating nlim   =            5
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_nclass: allocating 16 Pfirsch-Schlutter moments profiles.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_update_fromxplasma: allocating nr,nz  =          129 ,         129
  %ps_update_fromxplasma: allocating nlim   =            5
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_nclass: allocating 16 Pfirsch-Schlutter moments profiles.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_update_fromxplasma: allocating nr,nz  =          129 ,         129
  %ps_update_fromxplasma: allocating nlim   =            5
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_nclass: allocating 16 Pfirsch-Schlutter moments profiles.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_update_fromxplasma: allocating nr,nz  =          129 ,         129
  %ps_update_fromxplasma: allocating nlim   =            5
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_nclass: allocating 16 Pfirsch-Schlutter moments profiles.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_update_fromxplasma: allocating nr,nz  =          129 ,         129
  %ps_update_fromxplasma: allocating nlim   =            5
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
Icurt=9.983e+00MA
EQ step finished
TR step
fastran.step() entered
update_next = disabled
update_instate =  True
[1, 1, 36]
['D', 'T', 'Kr']
ion D
ion T
imp Kr
model_beam = 0
dump_vol_profile : rho_nbi pbe 0.0
dump_vol_profile : rho_nbi pbi 0.0
dump_vol_profile : rho_nbi pbth 0.0
dump_vol_profile : rho_nbi pbth 0.0
dump_vol_profile : rho_fus pfuse 43354187.020991534
dump_vol_profile : rho_fus pfusi 14383163.59042823
dump_vol_profile : rho_fus pfusth 0.0
dump_vol_profile : rho_ecrf peech 0.0
dump_vol_profile : rho_icrf picrf_totals 12640780.035184592
dump_vol_profile : rho_lhrf pelh 0.0
S_name =  ['e                               ' 'D                               '
 'T                               ' 'Kr                              ']
0 e                               
1 D                               
processing 1 D                               
dump_vol_profile : rho_icrf picrf_totals 194.22387390910362
2 T                               
processing 2 T                               
dump_vol_profile : rho_icrf picrf_totals 27359025.74094125
3 Kr                              
processing 3 Kr                              
dump_vol_profile : rho_icrf picrf_totals 0.0
dump_vol_profile : rho_lhrf pilh 0.0
dump_vol_profile : rho_nbi tqbe 0.0
dump_vol_profile : rho_nbi tqbi 0.0
dump_vol_profile : rho_nbi tqbjxb 0.0
dump_vol_profile : rho_nbi tqbth 0.0
dump_vol_profile : rho_nbi sbedep 0.0
dump_vol_profile : rho_nbi sbehalo 0.0
dump_vol_profile : rho sn_trans 0.0
dump_vol_profile : rho_rad prad 0.0
dump_vol_profile : rho pohme 0.0
/global/common/software/atom/perlmutter/binaries/fastran/default/xfastran_ver1.00_ser
ncpu =  1
n1d  =  1
nky  =  1
[1, 1, 36]
['D', 'T', 'Kr']
ion D
ion T
imp Kr
nspec_th = 3
Icurt=1.000e+01MA
Icurr_bootstrap=1.722e+00MA
Icurr_ohmic=0.000e+00MA
rho_fus pfuse 100 100
integrated :  43290674.0996338
rho_fus pfusi 100 100
integrated :  14249213.620259734
model_beam = 0
density_model = 1: impurity = f*ne
TR step finished

========================================================================
= fastran driver: iteration number =  2

IC step
toric.step() called
cur_state_file =  s000001.00001
('Total IC power = ', 40000000.0)
power =  40000000.0
 using s000001.00001 as default state.
  ps_init_tag: Plasma State v2.055 f90 module initialization.
 Prepare toric input reading machine.inp
 ps%ns(1,0)   2.7623067349999999E+020
 <n_e(m-3)-PS> =   1.8568291673125057E+020
 <n_e(m-3)-Interpolated> =   1.8653811925521708E+020
 Thermal ion name, A, Z, dens, temp = 
 D           2           1   1.2759454902770654E+020   20.384990888639308     
 Thermal ion name, A, Z, dens, temp = 
 T           3           1   1.2759454902770654E+020   20.384990888639308     
 Thermal ion name, A, Z, dens, temp = 
 Kr          83          36   5.8448820679408141E+017   20.384990888639308     
 Fast ion name, A, Z = D_beam           2           1
 Fast ion name, A, Z = He4_fusn           4           2
('prepare_eqdsk', '/global/common/software/atom/perlmutter/binaries/geqxpl/default/geqxpl', 'g000001.00001')
  
  G-EQdsk data accepted, maximum rel. GS error:    7.2574487805934880E-003
  
  Bphi is counter-clockwise viewed from above (nsnccwb = 1)
  
  Jphi is counter-clockwise viewed from above (nsnccwi = 1)
  
 equigs_write completion code (0=normal):           0
('toric processors = ', '24')
  -- get (restore) plasma state from file -- 
 process_toric_output: cur_state_file = s000001.00001
  ps_init_tag: Plasma State v2.055 f90 module initialization.
 freq_ic, picrf  alloc? T T
 RF alloc? T         600
    number of icrf sources =            1
    number of species =            5           3
 process toric output: profile and spec sizes:
 toric mesh, PS mesh         459         101
 toric species, PS species counts           5           3
 powers in percent
 total:   100.00000000000000     
 electron total   26.541927861537641        4.3152748472150835     
 ion totals fundamental   2.3195836557561025E-004   0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000     
 ion totals harmonic   0.0000000000000000        69.142565332881702        0.0000000000000000        0.0000000000000000        0.0000000000000000     
    number of thermal species (ps%nspec_th) =            3
    number of icrf sources (ps%nicrf_src) =            1
 ps%freq_ic =    0.0000000000000000     
 ps%icrf_src_name = IC00                            
 ps%power_ic =    40000000.000000000     
 ICRF Power   40000000.000000000     
   --storing toric data in current plasma state
 Total FW Driven Current (A)   184250.97789369759     
 Total ICRF Power (W)   40000000.000000000     
 FWCD Effciency (A/W)   4.6062744473424396E-003
 Total FW Driven Current from each source-> Interpolated (A)   184250.97789369777     
 Total FW Driven Current from all sources -> Interpolated (A)   184250.97789369777     
  *ps_update_file_write: normal exit,            5  update elements written.
 Stored Partial RF Plasma State
 electron power, integral
   12343057.501196221      Watts
 FW ion power, integral
   27656942.498803597      Watts
('merged TORIC plasma state data ', '/pscratch/sd/h/hswils/github_repos/ips-fastran-tutorial/MANTA/modeleq+toric/SCAN/work/rf_ic_toric_5/RF_IC_s000001.00001')
IC step finished
EQ step
>>> efit.step() started
INPUT: PRESSURE found kinetic , mapped value =  kinetic
INPUT: RELAX_PROFILE not found, use default value: 0
INPUT: RELAX_METRIC not found, use default value: 0.5
INPUT: BETAN_TARGET not found, use default value: -1.0
model_pressure = kinetic
betan = 1.221295324452194
INPUT: TOPOLOGY found DN , mapped value =  DN
INPUT: ERROR not found, use default value: 1.0e-4
INPUT: MAX_EFIT_ERROR not found, use default value: 0.1
init_run_step = 0
niter =  10
*** generate kfile 0
r0 = 4.55
b0 = 11.0
ip = 9999999.995
ip, ip cal, ip/(ip cal) = 10.000 10.003 1.000
weigting upper xpoint: [2, 3, 4, 5]
weigting lower xpoint: [9, 10, 11, 12]
run efit
efit, subprocess
elapsed time =  0.330  1.229
error_efit = 8.251e-05
*** generate kfile 1
apply underrelaxation
r0 = 4.55
b0 = 11.0
ip = 9999999.995
inmtric under-relax: 0.5
ip, ip cal, ip/(ip cal) = 10.000 9.995 1.000
weigting upper xpoint: [2, 3, 4, 5]
weigting lower xpoint: [9, 10, 11, 12]
diff_p = 0.00021663944865764107
diff_f = 0.0008586011038631725
converged
Icurt=9.988e+00MA
EQ step finished
TR step
fastran.step() entered
update_next = disabled
update_instate =  True
[1, 1, 36]
['D', 'T', 'Kr']
ion D
ion T
imp Kr
model_beam = 0
dump_vol_profile : rho_nbi pbe 0.0
dump_vol_profile : rho_nbi pbi 0.0
dump_vol_profile : rho_nbi pbth 0.0
dump_vol_profile : rho_nbi pbth 0.0
dump_vol_profile : rho_fus pfuse 43290674.0996338
dump_vol_profile : rho_fus pfusi 14249213.620259734
dump_vol_profile : rho_fus pfusth 0.0
dump_vol_profile : rho_ecrf peech 0.0
dump_vol_profile : rho_icrf picrf_totals 12343057.50119622
dump_vol_profile : rho_lhrf pelh 0.0
S_name =  ['e                               ' 'D                               '
 'T                               ' 'Kr                              ']
0 e                               
1 D                               
processing 1 D                               
dump_vol_profile : rho_icrf picrf_totals 202.68527499893236
2 T                               
processing 2 T                               
dump_vol_profile : rho_icrf picrf_totals 27656739.81352858
3 Kr                              
processing 3 Kr                              
dump_vol_profile : rho_icrf picrf_totals 0.0
dump_vol_profile : rho_lhrf pilh 0.0
dump_vol_profile : rho_nbi tqbe 0.0
dump_vol_profile : rho_nbi tqbi 0.0
dump_vol_profile : rho_nbi tqbjxb 0.0
dump_vol_profile : rho_nbi tqbth 0.0
dump_vol_profile : rho_nbi sbedep 0.0
dump_vol_profile : rho_nbi sbehalo 0.0
dump_vol_profile : rho sn_trans 0.0
dump_vol_profile : rho_rad prad 0.0
dump_vol_profile : rho pohme 0.0
/global/common/software/atom/perlmutter/binaries/fastran/default/xfastran_ver1.00_ser
ncpu =  1
n1d  =  1
nky  =  1
[1, 1, 36]
['D', 'T', 'Kr']
ion D
ion T
imp Kr
nspec_th = 3
Icurt=1.000e+01MA
Icurr_bootstrap=1.776e+00MA
Icurr_ohmic=0.000e+00MA
rho_fus pfuse 100 100
integrated :  46309299.796741724
rho_fus pfusi 100 100
integrated :  15351953.4336019
model_beam = 0
density_model = 1: impurity = f*ne
TR step finished

========================================================================
= fastran driver: iteration number =  3

IC step
toric.step() called
cur_state_file =  s000001.00001
('Total IC power = ', 40000000.0)
power =  40000000.0
 using s000001.00001 as default state.
  ps_init_tag: Plasma State v2.055 f90 module initialization.
 Prepare toric input reading machine.inp
 ps%ns(1,0)   2.7623067349999999E+020
 <n_e(m-3)-PS> =   1.8566331959880987E+020
 <n_e(m-3)-Interpolated> =   1.8652678971698404E+020
 Thermal ion name, A, Z, dens, temp = 
 D           2           1   1.2672245970173700E+020   21.173687735549919     
 Thermal ion name, A, Z, dens, temp = 
 T           3           1   1.2672245970173700E+020   21.173687735549919     
 Thermal ion name, A, Z, dens, temp = 
 Kr          83          36   6.3293761379238912E+017   21.173687735549919     
 Fast ion name, A, Z = D_beam           2           1
 Fast ion name, A, Z = He4_fusn           4           2
('prepare_eqdsk', '/global/common/software/atom/perlmutter/binaries/geqxpl/default/geqxpl', 'g000001.00001')
  
  G-EQdsk data accepted, maximum rel. GS error:    9.7241626615760333E-003
  
  Bphi is counter-clockwise viewed from above (nsnccwb = 1)
  
  Jphi is counter-clockwise viewed from above (nsnccwi = 1)
  
 equigs_write completion code (0=normal):           0
('toric processors = ', '24')
  -- get (restore) plasma state from file -- 
 process_toric_output: cur_state_file = s000001.00001
  ps_init_tag: Plasma State v2.055 f90 module initialization.
 freq_ic, picrf  alloc? T T
 RF alloc? T         600
    number of icrf sources =            1
    number of species =            5           3
 process toric output: profile and spec sizes:
 toric mesh, PS mesh         459         101
 toric species, PS species counts           5           3
 powers in percent
 total:   100.00000000000001     
 electron total   27.289382225643777        3.9845268208851334     
 ion totals fundamental   3.0662454231997655E-004   0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000     
 ion totals harmonic   0.0000000000000000        68.725784328928782        0.0000000000000000        0.0000000000000000        0.0000000000000000     
    number of thermal species (ps%nspec_th) =            3
    number of icrf sources (ps%nicrf_src) =            1
 ps%freq_ic =    0.0000000000000000     
 ps%icrf_src_name = IC00                            
 ps%power_ic =    40000000.000000000     
 ICRF Power   40000000.000000000     
   --storing toric data in current plasma state
 Total FW Driven Current (A)   181427.02814676223     
 Total ICRF Power (W)   40000000.000000000     
 FWCD Effciency (A/W)   4.5356757036690556E-003
 Total FW Driven Current from each source-> Interpolated (A)   181427.02814676202     
 Total FW Driven Current from all sources -> Interpolated (A)   181427.02814676202     
  *ps_update_file_write: normal exit,            5  update elements written.
 Stored Partial RF Plasma State
 electron power, integral
   12510296.435453286      Watts
 FW ion power, integral
   27489703.564546343      Watts
('merged TORIC plasma state data ', '/pscratch/sd/h/hswils/github_repos/ips-fastran-tutorial/MANTA/modeleq+toric/SCAN/work/rf_ic_toric_5/RF_IC_s000001.00001')
IC step finished
EQ step
>>> efit.step() started
INPUT: PRESSURE found kinetic , mapped value =  kinetic
INPUT: RELAX_PROFILE not found, use default value: 0
INPUT: RELAX_METRIC not found, use default value: 0.5
INPUT: BETAN_TARGET not found, use default value: -1.0
model_pressure = kinetic
betan = 1.1991969927368744
INPUT: TOPOLOGY found DN , mapped value =  DN
INPUT: ERROR not found, use default value: 1.0e-4
INPUT: MAX_EFIT_ERROR not found, use default value: 0.1
init_run_step = 0
niter =  10
*** generate kfile 0
r0 = 4.55
b0 = 11.0
ip = 9999999.995
ip, ip cal, ip/(ip cal) = 10.000 10.003 1.000
weigting upper xpoint: [2, 3, 4, 5]
weigting lower xpoint: [9, 10, 11, 12]
run efit
efit, subprocess
elapsed time =  0.326  1.186
error_efit = 8.563e-05
*** generate kfile 1
apply underrelaxation
r0 = 4.55
b0 = 11.0
ip = 9999999.995
inmtric under-relax: 0.5
ip, ip cal, ip/(ip cal) = 10.000 9.999 1.000
weigting upper xpoint: [2, 3, 4, 5]
weigting lower xpoint: [9, 10, 11, 12]
diff_p = 0.00021283138955942925
diff_f = 0.0005228917781880394
converged
  %ps_mhdeq_nclass: allocating 16 Pfirsch-Schlutter moments profiles.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_update_fromxplasma: allocating nr,nz  =          129 ,         129
  %ps_update_fromxplasma: allocating nlim   =            5
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_nclass: allocating 16 Pfirsch-Schlutter moments profiles.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_update_fromxplasma: allocating nr,nz  =          129 ,         129
  %ps_update_fromxplasma: allocating nlim   =            5
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_nclass: allocating 16 Pfirsch-Schlutter moments profiles.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_update_fromxplasma: allocating nr,nz  =          129 ,         129
  %ps_update_fromxplasma: allocating nlim   =            5
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_nclass: allocating 16 Pfirsch-Schlutter moments profiles.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_update_fromxplasma: allocating nr,nz  =          129 ,         129
  %ps_update_fromxplasma: allocating nlim   =            5
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_nclass: allocating 16 Pfirsch-Schlutter moments profiles.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_update_fromxplasma: allocating nr,nz  =          129 ,         129
  %ps_update_fromxplasma: allocating nlim   =            5
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_nclass: allocating 16 Pfirsch-Schlutter moments profiles.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_update_fromxplasma: allocating nr,nz  =          129 ,         129
  %ps_update_fromxplasma: allocating nlim   =            5
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
Icurt=9.996e+00MA
EQ step finished
TR step
fastran.step() entered
update_next = disabled
update_instate =  True
[1, 1, 36]
['D', 'T', 'Kr']
ion D
ion T
imp Kr
model_beam = 0
dump_vol_profile : rho_nbi pbe 0.0
dump_vol_profile : rho_nbi pbi 0.0
dump_vol_profile : rho_nbi pbth 0.0
dump_vol_profile : rho_nbi pbth 0.0
dump_vol_profile : rho_fus pfuse 46309299.796741724
dump_vol_profile : rho_fus pfusi 15351953.4336019
dump_vol_profile : rho_fus pfusth 0.0
dump_vol_profile : rho_ecrf peech 0.0
dump_vol_profile : rho_icrf picrf_totals 12510296.435453286
dump_vol_profile : rho_lhrf pelh 0.0
S_name =  ['e                               ' 'D                               '
 'T                               ' 'Kr                              ']
0 e                               
1 D                               
processing 1 D                               
dump_vol_profile : rho_icrf picrf_totals 243.50094714893072
2 T                               
processing 2 T                               
dump_vol_profile : rho_icrf picrf_totals 27489460.063599184
3 Kr                              
processing 3 Kr                              
dump_vol_profile : rho_icrf picrf_totals 0.0
dump_vol_profile : rho_lhrf pilh 0.0
dump_vol_profile : rho_nbi tqbe 0.0
dump_vol_profile : rho_nbi tqbi 0.0
dump_vol_profile : rho_nbi tqbjxb 0.0
dump_vol_profile : rho_nbi tqbth 0.0
dump_vol_profile : rho_nbi sbedep 0.0
dump_vol_profile : rho_nbi sbehalo 0.0
dump_vol_profile : rho sn_trans 0.0
dump_vol_profile : rho_rad prad 0.0
dump_vol_profile : rho pohme 0.0
/global/common/software/atom/perlmutter/binaries/fastran/default/xfastran_ver1.00_ser
ncpu =  1
n1d  =  1
nky  =  1
[1, 1, 36]
['D', 'T', 'Kr']
ion D
ion T
imp Kr
nspec_th = 3
Icurt=1.000e+01MA
Icurr_bootstrap=1.717e+00MA
Icurr_ohmic=0.000e+00MA
rho_fus pfuse 100 100
integrated :  43194094.35923137
rho_fus pfusi 100 100
integrated :  14119330.608979927
model_beam = 0
density_model = 1: impurity = f*ne
TR step finished

========================================================================
= fastran driver: iteration number =  4

IC step
toric.step() called
cur_state_file =  s000001.00001
('Total IC power = ', 40000000.0)
power =  40000000.0
 using s000001.00001 as default state.
  ps_init_tag: Plasma State v2.055 f90 module initialization.
 Prepare toric input reading machine.inp
 ps%ns(1,0)   2.7623067349999999E+020
 <n_e(m-3)-PS> =   1.8565371060216473E+020
 <n_e(m-3)-Interpolated> =   1.8652514357619032E+020
 Thermal ion name, A, Z, dens, temp = 
 D           2           1   1.2588583460967419E+020   21.566831949026966     
 Thermal ion name, A, Z, dens, temp = 
 T           3           1   1.2588583460967419E+020   21.566831949026966     
 Thermal ion name, A, Z, dens, temp = 
 Kr          83          36   6.7941678557365581E+017   21.566831949026966     
 Fast ion name, A, Z = D_beam           2           1
 Fast ion name, A, Z = He4_fusn           4           2
('prepare_eqdsk', '/global/common/software/atom/perlmutter/binaries/geqxpl/default/geqxpl', 'g000001.00001')
  
  G-EQdsk data accepted, maximum rel. GS error:    1.2506093693221924E-002
  
  Bphi is counter-clockwise viewed from above (nsnccwb = 1)
  
  Jphi is counter-clockwise viewed from above (nsnccwi = 1)
  
 equigs_write completion code (0=normal):           0
('toric processors = ', '24')
  -- get (restore) plasma state from file -- 
 process_toric_output: cur_state_file = s000001.00001
  ps_init_tag: Plasma State v2.055 f90 module initialization.
 freq_ic, picrf  alloc? T T
 RF alloc? T         600
    number of icrf sources =            1
    number of species =            5           3
 process toric output: profile and spec sizes:
 toric mesh, PS mesh         459         101
 toric species, PS species counts           5           3
 powers in percent
 total:   100.00000000000000     
 electron total   26.900498581883959        4.0636924799897391     
 ion totals fundamental   3.5366099623690954E-004   0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000     
 ion totals harmonic   0.0000000000000000        69.035455277130069        0.0000000000000000        0.0000000000000000        0.0000000000000000     
    number of thermal species (ps%nspec_th) =            3
    number of icrf sources (ps%nicrf_src) =            1
 ps%freq_ic =    0.0000000000000000     
 ps%icrf_src_name = IC00                            
 ps%power_ic =    40000000.000000000     
 ICRF Power   40000000.000000000     
   --storing toric data in current plasma state
 Total FW Driven Current (A)   172407.44368285727     
 Total ICRF Power (W)   40000000.000000000     
 FWCD Effciency (A/W)   4.3101860920714318E-003
 Total FW Driven Current from each source-> Interpolated (A)   172407.44368285767     
 Total FW Driven Current from all sources -> Interpolated (A)   172407.44368285767     
  *ps_update_file_write: normal exit,            5  update elements written.
 Stored Partial RF Plasma State
 electron power, integral
   12386388.637104211      Watts
 FW ion power, integral
   27613611.362895317      Watts
('merged TORIC plasma state data ', '/pscratch/sd/h/hswils/github_repos/ips-fastran-tutorial/MANTA/modeleq+toric/SCAN/work/rf_ic_toric_5/RF_IC_s000001.00001')
IC step finished
EQ step
>>> efit.step() started
INPUT: PRESSURE found kinetic , mapped value =  kinetic
INPUT: RELAX_PROFILE not found, use default value: 0
INPUT: RELAX_METRIC not found, use default value: 0.5
INPUT: BETAN_TARGET not found, use default value: -1.0
model_pressure = kinetic
betan = 1.1731628940382879
INPUT: TOPOLOGY found DN , mapped value =  DN
INPUT: ERROR not found, use default value: 1.0e-4
INPUT: MAX_EFIT_ERROR not found, use default value: 0.1
init_run_step = 0
niter =  10
*** generate kfile 0
r0 = 4.55
b0 = 11.0
ip = 9999999.995
ip, ip cal, ip/(ip cal) = 10.000 10.003 1.000
weigting upper xpoint: [2, 3, 4, 5]
weigting lower xpoint: [9, 10, 11, 12]
run efit
efit, subprocess
elapsed time =  0.332  1.206
error_efit = 7.883e-05
*** generate kfile 1
apply underrelaxation
r0 = 4.55
b0 = 11.0
ip = 9999999.995
inmtric under-relax: 0.5
ip, ip cal, ip/(ip cal) = 10.000 9.998 1.000
weigting upper xpoint: [2, 3, 4, 5]
weigting lower xpoint: [9, 10, 11, 12]
diff_p = 0.0001236642076116394
diff_f = 0.000421067786251121
converged
Icurt=9.994e+00MA
EQ step finished
TR step
fastran.step() entered
update_next = disabled
update_instate =  True
[1, 1, 36]
['D', 'T', 'Kr']
ion D
ion T
imp Kr
model_beam = 0
dump_vol_profile : rho_nbi pbe 0.0
dump_vol_profile : rho_nbi pbi 0.0
dump_vol_profile : rho_nbi pbth 0.0
dump_vol_profile : rho_nbi pbth 0.0
dump_vol_profile : rho_fus pfuse 43194094.35923137
dump_vol_profile : rho_fus pfusi 14119330.608979927
dump_vol_profile : rho_fus pfusth 0.0
dump_vol_profile : rho_ecrf peech 0.0
dump_vol_profile : rho_icrf picrf_totals 12386388.637104211
dump_vol_profile : rho_lhrf pelh 0.0
S_name =  ['e                               ' 'D                               '
 'T                               ' 'Kr                              ']
0 e                               
1 D                               
processing 1 D                               
dump_vol_profile : rho_icrf picrf_totals 275.18360295599837
2 T                               
processing 2 T                               
dump_vol_profile : rho_icrf picrf_totals 27613336.17929236
3 Kr                              
processing 3 Kr                              
dump_vol_profile : rho_icrf picrf_totals 0.0
dump_vol_profile : rho_lhrf pilh 0.0
dump_vol_profile : rho_nbi tqbe 0.0
dump_vol_profile : rho_nbi tqbi 0.0
dump_vol_profile : rho_nbi tqbjxb 0.0
dump_vol_profile : rho_nbi tqbth 0.0
dump_vol_profile : rho_nbi sbedep 0.0
dump_vol_profile : rho_nbi sbehalo 0.0
dump_vol_profile : rho sn_trans 0.0
dump_vol_profile : rho_rad prad 0.0
dump_vol_profile : rho pohme 0.0
/global/common/software/atom/perlmutter/binaries/fastran/default/xfastran_ver1.00_ser
ncpu =  1
n1d  =  1
nky  =  1
[1, 1, 36]
['D', 'T', 'Kr']
ion D
ion T
imp Kr
nspec_th = 3
Icurt=1.000e+01MA
Icurr_bootstrap=1.673e+00MA
Icurr_ohmic=0.000e+00MA
rho_fus pfuse 100 100
integrated :  41080884.893080376
rho_fus pfusi 100 100
integrated :  13255768.878930878
model_beam = 0
density_model = 1: impurity = f*ne
TR step finished

========================================================================
= fastran driver: iteration number =  5

IC step
toric.step() called
cur_state_file =  s000001.00001
('Total IC power = ', 40000000.0)
power =  40000000.0
 using s000001.00001 as default state.
  ps_init_tag: Plasma State v2.055 f90 module initialization.
 Prepare toric input reading machine.inp
 ps%ns(1,0)   2.7623067349999999E+020
 <n_e(m-3)-PS> =   1.8563859814702966E+020
 <n_e(m-3)-Interpolated> =   1.8651780332326470E+020
 Thermal ion name, A, Z, dens, temp = 
 D           2           1   1.2507659153746654E+020   21.732371893801851     
 Thermal ion name, A, Z, dens, temp = 
 T           3           1   1.2507659153746654E+020   21.732371893801851     
 Thermal ion name, A, Z, dens, temp = 
 Kr          83          36   7.2437473402963597E+017   21.732371893801851     
 Fast ion name, A, Z = D_beam           2           1
 Fast ion name, A, Z = He4_fusn           4           2
('prepare_eqdsk', '/global/common/software/atom/perlmutter/binaries/geqxpl/default/geqxpl', 'g000001.00001')
  
  G-EQdsk data accepted, maximum rel. GS error:    1.4687157096915454E-002
  
  Bphi is counter-clockwise viewed from above (nsnccwb = 1)
  
  Jphi is counter-clockwise viewed from above (nsnccwi = 1)
  
 equigs_write completion code (0=normal):           0
('toric processors = ', '24')
  -- get (restore) plasma state from file -- 
 process_toric_output: cur_state_file = s000001.00001
  ps_init_tag: Plasma State v2.055 f90 module initialization.
 freq_ic, picrf  alloc? T T
 RF alloc? T         600
    number of icrf sources =            1
    number of species =            5           3
 process toric output: profile and spec sizes:
 toric mesh, PS mesh         459         101
 toric species, PS species counts           5           3
 powers in percent
 total:   100.00000000000000     
 electron total   26.359969454489917        4.2058061816218997     
 ion totals fundamental   4.0972880082650628E-004   0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000     
 ion totals harmonic   0.0000000000000000        69.433814635087359        0.0000000000000000        0.0000000000000000        0.0000000000000000     
    number of thermal species (ps%nspec_th) =            3
    number of icrf sources (ps%nicrf_src) =            1
 ps%freq_ic =    0.0000000000000000     
 ps%icrf_src_name = IC00                            
 ps%power_ic =    40000000.000000000     
 ICRF Power   40000000.000000000     
   --storing toric data in current plasma state
 Total FW Driven Current (A)   164227.34814953880     
 Total ICRF Power (W)   40000000.000000000     
 FWCD Effciency (A/W)   4.1056837037384700E-003
 Total FW Driven Current from each source-> Interpolated (A)   164227.34814953877     
 Total FW Driven Current from all sources -> Interpolated (A)   164227.34814953877     
  *ps_update_file_write: normal exit,            5  update elements written.
 Stored Partial RF Plasma State
 electron power, integral
   12226225.350145841      Watts
 FW ion power, integral
   27773774.649853636      Watts
('merged TORIC plasma state data ', '/pscratch/sd/h/hswils/github_repos/ips-fastran-tutorial/MANTA/modeleq+toric/SCAN/work/rf_ic_toric_5/RF_IC_s000001.00001')
IC step finished
EQ step
>>> efit.step() started
INPUT: PRESSURE found kinetic , mapped value =  kinetic
INPUT: RELAX_PROFILE not found, use default value: 0
INPUT: RELAX_METRIC not found, use default value: 0.5
INPUT: BETAN_TARGET not found, use default value: -1.0
model_pressure = kinetic
betan = 1.1464673047817686
INPUT: TOPOLOGY found DN , mapped value =  DN
INPUT: ERROR not found, use default value: 1.0e-4
INPUT: MAX_EFIT_ERROR not found, use default value: 0.1
init_run_step = 0
niter =  10
*** generate kfile 0
r0 = 4.55
b0 = 11.0
ip = 9999999.995
ip, ip cal, ip/(ip cal) = 10.000 10.003 1.000
weigting upper xpoint: [2, 3, 4, 5]
weigting lower xpoint: [9, 10, 11, 12]
run efit
efit, subprocess
elapsed time =  0.327  1.198
error_efit = 9.723e-05
*** generate kfile 1
apply underrelaxation
r0 = 4.55
b0 = 11.0
ip = 9999999.995
inmtric under-relax: 0.5
ip, ip cal, ip/(ip cal) = 10.000 9.998 1.000
weigting upper xpoint: [2, 3, 4, 5]
weigting lower xpoint: [9, 10, 11, 12]
diff_p = 7.626364427170352e-05
diff_f = 0.0003394183154982869
converged
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_nclass: allocating 16 Pfirsch-Schlutter moments profiles.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_update_fromxplasma: allocating nr,nz  =          129 ,         129
  %ps_update_fromxplasma: allocating nlim   =            5
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_nclass: allocating 16 Pfirsch-Schlutter moments profiles.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_update_fromxplasma: allocating nr,nz  =          129 ,         129
  %ps_update_fromxplasma: allocating nlim   =            5
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_nclass: allocating 16 Pfirsch-Schlutter moments profiles.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_update_fromxplasma: allocating nr,nz  =          129 ,         129
  %ps_update_fromxplasma: allocating nlim   =            5
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_nclass: allocating 16 Pfirsch-Schlutter moments profiles.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_update_fromxplasma: allocating nr,nz  =          129 ,         129
  %ps_update_fromxplasma: allocating nlim   =            5
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_nclass: allocating 16 Pfirsch-Schlutter moments profiles.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_update_fromxplasma: allocating nr,nz  =          129 ,         129
  %ps_update_fromxplasma: allocating nlim   =            5
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_nclass: allocating 16 Pfirsch-Schlutter moments profiles.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_update_fromxplasma: allocating nr,nz  =          129 ,         129
  %ps_update_fromxplasma: allocating nlim   =            5
Icurt=9.993e+00MA
EQ step finished
TR step
fastran.step() entered
update_next = disabled
update_instate =  True
[1, 1, 36]
['D', 'T', 'Kr']
ion D
ion T
imp Kr
model_beam = 0
dump_vol_profile : rho_nbi pbe 0.0
dump_vol_profile : rho_nbi pbi 0.0
dump_vol_profile : rho_nbi pbth 0.0
dump_vol_profile : rho_nbi pbth 0.0
dump_vol_profile : rho_fus pfuse 41080884.893080376
dump_vol_profile : rho_fus pfusi 13255768.878930878
dump_vol_profile : rho_fus pfusth 0.0
dump_vol_profile : rho_ecrf peech 0.0
dump_vol_profile : rho_icrf picrf_totals 12226225.350145841
dump_vol_profile : rho_lhrf pelh 0.0
S_name =  ['e                               ' 'D                               '
 'T                               ' 'Kr                              ']
0 e                               
1 D                               
processing 1 D                               
dump_vol_profile : rho_icrf picrf_totals 312.1029869589843
2 T                               
processing 2 T                               
dump_vol_profile : rho_icrf picrf_totals 27773462.54686669
3 Kr                              
processing 3 Kr                              
dump_vol_profile : rho_icrf picrf_totals 0.0
dump_vol_profile : rho_lhrf pilh 0.0
dump_vol_profile : rho_nbi tqbe 0.0
dump_vol_profile : rho_nbi tqbi 0.0
dump_vol_profile : rho_nbi tqbjxb 0.0
dump_vol_profile : rho_nbi tqbth 0.0
dump_vol_profile : rho_nbi sbedep 0.0
dump_vol_profile : rho_nbi sbehalo 0.0
dump_vol_profile : rho sn_trans 0.0
dump_vol_profile : rho_rad prad 0.0
dump_vol_profile : rho pohme 0.0
/global/common/software/atom/perlmutter/binaries/fastran/default/xfastran_ver1.00_ser
ncpu =  1
n1d  =  1
nky  =  1
[1, 1, 36]
['D', 'T', 'Kr']
ion D
ion T
imp Kr
nspec_th = 3
Icurt=1.000e+01MA
Icurr_bootstrap=1.638e+00MA
Icurr_ohmic=0.000e+00MA
rho_fus pfuse 100 100
integrated :  39540382.771167226
rho_fus pfusi 100 100
integrated :  12561090.716279417
model_beam = 0
density_model = 1: impurity = f*ne
TR step finished

========================================================================
= fastran driver: iteration number =  6

IC step
toric.step() called
cur_state_file =  s000001.00001
('Total IC power = ', 40000000.0)
power =  40000000.0
 using s000001.00001 as default state.
  ps_init_tag: Plasma State v2.055 f90 module initialization.
 Prepare toric input reading machine.inp
 ps%ns(1,0)   2.7623067349999999E+020
 <n_e(m-3)-PS> =   1.8562079828903893E+020
 <n_e(m-3)-Interpolated> =   1.8650761404037421E+020
 Thermal ion name, A, Z, dens, temp = 
 D           2           1   1.2428760219371918E+020   21.772519933948743     
 Thermal ion name, A, Z, dens, temp = 
 T           3           1   1.2428760219371918E+020   21.772519933948743     
 Thermal ion name, A, Z, dens, temp = 
 Kr          83          36   7.6820747534893427E+017   21.772519933948743     
 Fast ion name, A, Z = D_beam           2           1
 Fast ion name, A, Z = He4_fusn           4           2
('prepare_eqdsk', '/global/common/software/atom/perlmutter/binaries/geqxpl/default/geqxpl', 'g000001.00001')
  
  G-EQdsk data accepted, maximum rel. GS error:    1.6387384496705428E-002
  
  Bphi is counter-clockwise viewed from above (nsnccwb = 1)
  
  Jphi is counter-clockwise viewed from above (nsnccwi = 1)
  
 equigs_write completion code (0=normal):           0
('toric processors = ', '24')
  -- get (restore) plasma state from file -- 
 process_toric_output: cur_state_file = s000001.00001
  ps_init_tag: Plasma State v2.055 f90 module initialization.
 freq_ic, picrf  alloc? T T
 RF alloc? T         600
    number of icrf sources =            1
    number of species =            5           3
 process toric output: profile and spec sizes:
 toric mesh, PS mesh         459         101
 toric species, PS species counts           5           3
 powers in percent
 total:   100.00000000000000     
 electron total   26.015908024506910        4.2763104069933995     
 ion totals fundamental   4.8523363750472583E-004   0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000     
 ion totals harmonic   0.0000000000000000        69.707296334862193        0.0000000000000000        0.0000000000000000        0.0000000000000000     
    number of thermal species (ps%nspec_th) =            3
    number of icrf sources (ps%nicrf_src) =            1
 ps%freq_ic =    0.0000000000000000     
 ps%icrf_src_name = IC00                            
 ps%power_ic =    40000000.000000000     
 ICRF Power   40000000.000000000     
   --storing toric data in current plasma state
 Total FW Driven Current (A)   156169.22010499425     
 Total ICRF Power (W)   40000000.000000000     
 FWCD Effciency (A/W)   3.9042305026248565E-003
 Total FW Driven Current from each source-> Interpolated (A)   156169.22010499405     
 Total FW Driven Current from all sources -> Interpolated (A)   156169.22010499405     
  *ps_update_file_write: normal exit,            5  update elements written.
 Stored Partial RF Plasma State
 electron power, integral
   12116929.750362597      Watts
 FW ion power, integral
   27883070.249637015      Watts
('merged TORIC plasma state data ', '/pscratch/sd/h/hswils/github_repos/ips-fastran-tutorial/MANTA/modeleq+toric/SCAN/work/rf_ic_toric_5/RF_IC_s000001.00001')
IC step finished
EQ step
>>> efit.step() started
INPUT: PRESSURE found kinetic , mapped value =  kinetic
INPUT: RELAX_PROFILE not found, use default value: 0
INPUT: RELAX_METRIC not found, use default value: 0.5
INPUT: BETAN_TARGET not found, use default value: -1.0
model_pressure = kinetic
betan = 1.120730587577823
INPUT: TOPOLOGY found DN , mapped value =  DN
INPUT: ERROR not found, use default value: 1.0e-4
INPUT: MAX_EFIT_ERROR not found, use default value: 0.1
init_run_step = 0
niter =  10
*** generate kfile 0
r0 = 4.55
b0 = 11.0
ip = 9999999.995
ip, ip cal, ip/(ip cal) = 10.000 10.003 1.000
weigting upper xpoint: [2, 3, 4, 5]
weigting lower xpoint: [9, 10, 11, 12]
run efit
efit, subprocess
elapsed time =  0.330  1.242
error_efit = 8.689e-05
*** generate kfile 1
apply underrelaxation
r0 = 4.55
b0 = 11.0
ip = 9999999.995
inmtric under-relax: 0.5
ip, ip cal, ip/(ip cal) = 10.000 9.998 1.000
weigting upper xpoint: [2, 3, 4, 5]
weigting lower xpoint: [9, 10, 11, 12]
diff_p = 5.9905933152499014e-05
diff_f = 0.0002903391111169118
converged
Icurt=9.994e+00MA
EQ step finished
TR step
fastran.step() entered
update_next = disabled
update_instate =  True
[1, 1, 36]
['D', 'T', 'Kr']
ion D
ion T
imp Kr
model_beam = 0
dump_vol_profile : rho_nbi pbe 0.0
dump_vol_profile : rho_nbi pbi 0.0
dump_vol_profile : rho_nbi pbth 0.0
dump_vol_profile : rho_nbi pbth 0.0
dump_vol_profile : rho_fus pfuse 39540382.771167226
dump_vol_profile : rho_fus pfusi 12561090.716279417
dump_vol_profile : rho_fus pfusth 0.0
dump_vol_profile : rho_ecrf peech 0.0
dump_vol_profile : rho_icrf picrf_totals 12116929.750362597
dump_vol_profile : rho_lhrf pelh 0.0
S_name =  ['e                               ' 'D                               '
 'T                               ' 'Kr                              ']
0 e                               
1 D                               
processing 1 D                               
dump_vol_profile : rho_icrf picrf_totals 356.92187095365125
2 T                               
processing 2 T                               
dump_vol_profile : rho_icrf picrf_totals 27882713.32776605
3 Kr                              
processing 3 Kr                              
dump_vol_profile : rho_icrf picrf_totals 0.0
dump_vol_profile : rho_lhrf pilh 0.0
dump_vol_profile : rho_nbi tqbe 0.0
dump_vol_profile : rho_nbi tqbi 0.0
dump_vol_profile : rho_nbi tqbjxb 0.0
dump_vol_profile : rho_nbi tqbth 0.0
dump_vol_profile : rho_nbi sbedep 0.0
dump_vol_profile : rho_nbi sbehalo 0.0
dump_vol_profile : rho sn_trans 0.0
dump_vol_profile : rho_rad prad 0.0
dump_vol_profile : rho pohme 0.0
/global/common/software/atom/perlmutter/binaries/fastran/default/xfastran_ver1.00_ser
ncpu =  1
n1d  =  1
nky  =  1
[1, 1, 36]
['D', 'T', 'Kr']
ion D
ion T
imp Kr
nspec_th = 3
Icurt=1.000e+01MA
Icurr_bootstrap=1.572e+00MA
Icurr_ohmic=0.000e+00MA
rho_fus pfuse 100 100
integrated :  36483623.33471145
rho_fus pfusi 100 100
integrated :  11273442.609138295
model_beam = 0
density_model = 1: impurity = f*ne
TR step finished

========================================================================
= fastran driver: iteration number =  7

IC step
toric.step() called
cur_state_file =  s000001.00001
('Total IC power = ', 40000000.0)
power =  40000000.0
 using s000001.00001 as default state.
  ps_init_tag: Plasma State v2.055 f90 module initialization.
 Prepare toric input reading machine.inp
 ps%ns(1,0)   2.7623067349999999E+020
 <n_e(m-3)-PS> =   1.8560229585039429E+020
 <n_e(m-3)-Interpolated> =   1.8649627344407403E+020
 Thermal ion name, A, Z, dens, temp = 
 D           2           1   1.2354853378804148E+020   21.557677376924659     
 Thermal ion name, A, Z, dens, temp = 
 T           3           1   1.2354853378804148E+020   21.557677376924659     
 Thermal ion name, A, Z, dens, temp = 
 Kr          83          36   8.0926683121991757E+017   21.557677376924659     
 Fast ion name, A, Z = D_beam           2           1
 Fast ion name, A, Z = He4_fusn           4           2
('prepare_eqdsk', '/global/common/software/atom/perlmutter/binaries/geqxpl/default/geqxpl', 'g000001.00001')
  
  G-EQdsk data accepted, maximum rel. GS error:    1.7716613687924487E-002
  
  Bphi is counter-clockwise viewed from above (nsnccwb = 1)
  
  Jphi is counter-clockwise viewed from above (nsnccwi = 1)
  
 equigs_write completion code (0=normal):           0
('toric processors = ', '24')
  -- get (restore) plasma state from file -- 
 process_toric_output: cur_state_file = s000001.00001
  ps_init_tag: Plasma State v2.055 f90 module initialization.
 freq_ic, picrf  alloc? T T
 RF alloc? T         600
    number of icrf sources =            1
    number of species =            5           3
 process toric output: profile and spec sizes:
 toric mesh, PS mesh         459         101
 toric species, PS species counts           5           3
 powers in percent
 total:   99.999999999999986     
 electron total   25.790736225429836        4.2679070376911890     
 ion totals fundamental   5.7869598699753031E-004   0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000     
 ion totals harmonic   0.0000000000000000        69.940778040891956        0.0000000000000000        0.0000000000000000        0.0000000000000000     
    number of thermal species (ps%nspec_th) =            3
    number of icrf sources (ps%nicrf_src) =            1
 ps%freq_ic =    0.0000000000000000     
 ps%icrf_src_name = IC00                            
 ps%power_ic =    40000000.000000000     
 ICRF Power   40000000.000000000     
   --storing toric data in current plasma state
 Total FW Driven Current (A)   148012.94904488418     
 Total ICRF Power (W)   40000000.000000000     
 FWCD Effciency (A/W)   3.7003237261221044E-003
 Total FW Driven Current from each source-> Interpolated (A)   148012.94904488418     
 Total FW Driven Current from all sources -> Interpolated (A)   148012.94904488418     
  *ps_update_file_write: normal exit,            5  update elements written.
 Stored Partial RF Plasma State
 electron power, integral
   12024451.984291229      Watts
 FW ion power, integral
   27975548.015708312      Watts
('merged TORIC plasma state data ', '/pscratch/sd/h/hswils/github_repos/ips-fastran-tutorial/MANTA/modeleq+toric/SCAN/work/rf_ic_toric_5/RF_IC_s000001.00001')
IC step finished
EQ step
>>> efit.step() started
INPUT: PRESSURE found kinetic , mapped value =  kinetic
INPUT: RELAX_PROFILE not found, use default value: 0
INPUT: RELAX_METRIC not found, use default value: 0.5
INPUT: BETAN_TARGET not found, use default value: -1.0
model_pressure = kinetic
betan = 1.0906412398164433
INPUT: TOPOLOGY found DN , mapped value =  DN
INPUT: ERROR not found, use default value: 1.0e-4
INPUT: MAX_EFIT_ERROR not found, use default value: 0.1
init_run_step = 0
niter =  10
*** generate kfile 0
r0 = 4.55
b0 = 11.0
ip = 9999999.995
ip, ip cal, ip/(ip cal) = 10.000 10.003 1.000
weigting upper xpoint: [2, 3, 4, 5]
weigting lower xpoint: [9, 10, 11, 12]
run efit
efit, subprocess
elapsed time =  0.329  1.260
error_efit = 7.152e-05
*** generate kfile 1
apply underrelaxation
r0 = 4.55
b0 = 11.0
ip = 9999999.995
inmtric under-relax: 0.5
ip, ip cal, ip/(ip cal) = 10.000 9.997 1.000
weigting upper xpoint: [2, 3, 4, 5]
weigting lower xpoint: [9, 10, 11, 12]
diff_p = 0.00011330827758404134
diff_f = 0.0002380860466671515
converged
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_nclass: allocating 16 Pfirsch-Schlutter moments profiles.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_update_fromxplasma: allocating nr,nz  =          129 ,         129
  %ps_update_fromxplasma: allocating nlim   =            5
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_nclass: allocating 16 Pfirsch-Schlutter moments profiles.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_update_fromxplasma: allocating nr,nz  =          129 ,         129
  %ps_update_fromxplasma: allocating nlim   =            5
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_nclass: allocating 16 Pfirsch-Schlutter moments profiles.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_update_fromxplasma: allocating nr,nz  =          129 ,         129
  %ps_update_fromxplasma: allocating nlim   =            5
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_nclass: allocating 16 Pfirsch-Schlutter moments profiles.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_update_fromxplasma: allocating nr,nz  =          129 ,         129
  %ps_update_fromxplasma: allocating nlim   =            5
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_nclass: allocating 16 Pfirsch-Schlutter moments profiles.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_update_fromxplasma: allocating nr,nz  =          129 ,         129
  %ps_update_fromxplasma: allocating nlim   =            5
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_nclass: allocating 16 Pfirsch-Schlutter moments profiles.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
Icurt=9.991e+00MA
EQ step finished
TR step
fastran.step() entered
update_next = disabled
update_instate =  True
[1, 1, 36]
['D', 'T', 'Kr']
ion D
ion T
imp Kr
model_beam = 0
dump_vol_profile : rho_nbi pbe 0.0
dump_vol_profile : rho_nbi pbi 0.0
dump_vol_profile : rho_nbi pbth 0.0
dump_vol_profile : rho_nbi pbth 0.0
dump_vol_profile : rho_fus pfuse 36483623.33471145
dump_vol_profile : rho_fus pfusi 11273442.609138295
dump_vol_profile : rho_fus pfusth 0.0
dump_vol_profile : rho_ecrf peech 0.0
dump_vol_profile : rho_icrf picrf_totals 12024451.98429123
dump_vol_profile : rho_lhrf pelh 0.0
S_name =  ['e                               ' 'D                               '
 'T                               ' 'Kr                              ']
0 e                               
1 D                               
processing 1 D                               
dump_vol_profile : rho_icrf picrf_totals 411.64735329166007
2 T                               
processing 2 T                               
dump_vol_profile : rho_icrf picrf_totals 27975136.36835502
3 Kr                              
processing 3 Kr                              
dump_vol_profile : rho_icrf picrf_totals 0.0
dump_vol_profile : rho_lhrf pilh 0.0
dump_vol_profile : rho_nbi tqbe 0.0
dump_vol_profile : rho_nbi tqbi 0.0
dump_vol_profile : rho_nbi tqbjxb 0.0
dump_vol_profile : rho_nbi tqbth 0.0
dump_vol_profile : rho_nbi sbedep 0.0
dump_vol_profile : rho_nbi sbehalo 0.0
dump_vol_profile : rho sn_trans 0.0
dump_vol_profile : rho_rad prad 0.0
dump_vol_profile : rho pohme 0.0
/global/common/software/atom/perlmutter/binaries/fastran/default/xfastran_ver1.00_ser
ncpu =  1
n1d  =  1
nky  =  1
[1, 1, 36]
['D', 'T', 'Kr']
ion D
ion T
imp Kr
nspec_th = 3
Icurt=1.000e+01MA
Icurr_bootstrap=1.571e+00MA
Icurr_ohmic=0.000e+00MA
rho_fus pfuse 100 100
integrated :  36367976.464443125
rho_fus pfusi 100 100
integrated :  11178478.152062498
model_beam = 0
density_model = 1: impurity = f*ne
TR step finished

========================================================================
= fastran driver: iteration number =  8

IC step
toric.step() called
cur_state_file =  s000001.00001
('Total IC power = ', 40000000.0)
power =  40000000.0
 using s000001.00001 as default state.
  ps_init_tag: Plasma State v2.055 f90 module initialization.
 Prepare toric input reading machine.inp
 ps%ns(1,0)   2.7623067349999999E+020
 <n_e(m-3)-PS> =   1.8557897394545997E+020
 <n_e(m-3)-Interpolated> =   1.8648008772873014E+020
 Thermal ion name, A, Z, dens, temp = 
 D           2           1   1.2281618468521977E+020   21.456034186310237     
 Thermal ion name, A, Z, dens, temp = 
 T           3           1   1.2281618468521977E+020   21.456034186310237     
 Thermal ion name, A, Z, dens, temp = 
 Kr          83          36   8.4995289248778944E+017   21.456034186310237     
 Fast ion name, A, Z = D_beam           2           1
 Fast ion name, A, Z = He4_fusn           4           2
('prepare_eqdsk', '/global/common/software/atom/perlmutter/binaries/geqxpl/default/geqxpl', 'g000001.00001')
  
  G-EQdsk data accepted, maximum rel. GS error:    1.8777313612738881E-002
  
  Bphi is counter-clockwise viewed from above (nsnccwb = 1)
  
  Jphi is counter-clockwise viewed from above (nsnccwi = 1)
  
 equigs_write completion code (0=normal):           0
('toric processors = ', '24')
  -- get (restore) plasma state from file -- 
 process_toric_output: cur_state_file = s000001.00001
  ps_init_tag: Plasma State v2.055 f90 module initialization.
 freq_ic, picrf  alloc? T T
 RF alloc? T         600
    number of icrf sources =            1
    number of species =            5           3
 process toric output: profile and spec sizes:
 toric mesh, PS mesh         459         101
 toric species, PS species counts           5           3
 powers in percent
 total:   100.00000000000000     
 electron total   26.312202768205459        4.2783644317307719     
 ion totals fundamental   7.7530743137327091E-004   0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000     
 ion totals harmonic   0.0000000000000000        69.408657492632400        0.0000000000000000        0.0000000000000000        0.0000000000000000     
    number of thermal species (ps%nspec_th) =            3
    number of icrf sources (ps%nicrf_src) =            1
 ps%freq_ic =    0.0000000000000000     
 ps%icrf_src_name = IC00                            
 ps%power_ic =    40000000.000000000     
 ICRF Power   40000000.000000000     
   --storing toric data in current plasma state
 Total FW Driven Current (A)   144203.62284664655     
 Total ICRF Power (W)   40000000.000000000     
 FWCD Effciency (A/W)   3.6050905711661639E-003
 Total FW Driven Current from each source-> Interpolated (A)   144203.62284664658     
 Total FW Driven Current from all sources -> Interpolated (A)   144203.62284664658     
  *ps_update_file_write: normal exit,            5  update elements written.
 Stored Partial RF Plasma State
 electron power, integral
   12238135.498593863      Watts
 FW ion power, integral
   27761864.501405686      Watts
('merged TORIC plasma state data ', '/pscratch/sd/h/hswils/github_repos/ips-fastran-tutorial/MANTA/modeleq+toric/SCAN/work/rf_ic_toric_5/RF_IC_s000001.00001')
IC step finished
EQ step
>>> efit.step() started
INPUT: PRESSURE found kinetic , mapped value =  kinetic
INPUT: RELAX_PROFILE not found, use default value: 0
INPUT: RELAX_METRIC not found, use default value: 0.5
INPUT: BETAN_TARGET not found, use default value: -1.0
model_pressure = kinetic
betan = 1.0678007890075036
INPUT: TOPOLOGY found DN , mapped value =  DN
INPUT: ERROR not found, use default value: 1.0e-4
INPUT: MAX_EFIT_ERROR not found, use default value: 0.1
init_run_step = 0
niter =  10
*** generate kfile 0
r0 = 4.55
b0 = 11.0
ip = 9999999.995
ip, ip cal, ip/(ip cal) = 10.000 10.003 1.000
weigting upper xpoint: [2, 3, 4, 5]
weigting lower xpoint: [9, 10, 11, 12]
run efit
efit, subprocess
elapsed time =  0.329  1.245
error_efit = 8.213e-05
*** generate kfile 1
apply underrelaxation
r0 = 4.55
b0 = 11.0
ip = 9999999.995
inmtric under-relax: 0.5
ip, ip cal, ip/(ip cal) = 10.000 9.999 1.000
weigting upper xpoint: [2, 3, 4, 5]
weigting lower xpoint: [9, 10, 11, 12]
diff_p = 8.828160718387663e-05
diff_f = 0.00016623168481468882
converged
Icurt=9.995e+00MA
EQ step finished
TR step
fastran.step() entered
update_next = disabled
update_instate =  True
[1, 1, 36]
['D', 'T', 'Kr']
ion D
ion T
imp Kr
model_beam = 0
dump_vol_profile : rho_nbi pbe 0.0
dump_vol_profile : rho_nbi pbi 0.0
dump_vol_profile : rho_nbi pbth 0.0
dump_vol_profile : rho_nbi pbth 0.0
dump_vol_profile : rho_fus pfuse 36367976.464443125
dump_vol_profile : rho_fus pfusi 11178478.152062498
dump_vol_profile : rho_fus pfusth 0.0
dump_vol_profile : rho_ecrf peech 0.0
dump_vol_profile : rho_icrf picrf_totals 12238135.498593863
dump_vol_profile : rho_lhrf pelh 0.0
S_name =  ['e                               ' 'D                               '
 'T                               ' 'Kr                              ']
0 e                               
1 D                               
processing 1 D                               
dump_vol_profile : rho_icrf picrf_totals 524.8029072177924
2 T                               
processing 2 T                               
dump_vol_profile : rho_icrf picrf_totals 27761339.69849847
3 Kr                              
processing 3 Kr                              
dump_vol_profile : rho_icrf picrf_totals 0.0
dump_vol_profile : rho_lhrf pilh 0.0
dump_vol_profile : rho_nbi tqbe 0.0
dump_vol_profile : rho_nbi tqbi 0.0
dump_vol_profile : rho_nbi tqbjxb 0.0
dump_vol_profile : rho_nbi tqbth 0.0
dump_vol_profile : rho_nbi sbedep 0.0
dump_vol_profile : rho_nbi sbehalo 0.0
dump_vol_profile : rho sn_trans 0.0
dump_vol_profile : rho_rad prad 0.0
dump_vol_profile : rho pohme 0.0
/global/common/software/atom/perlmutter/binaries/fastran/default/xfastran_ver1.00_ser
ncpu =  1
n1d  =  1
nky  =  1
[1, 1, 36]
['D', 'T', 'Kr']
ion D
ion T
imp Kr
nspec_th = 3
Icurt=1.000e+01MA
Icurr_bootstrap=1.566e+00MA
Icurr_ohmic=0.000e+00MA
rho_fus pfuse 100 100
integrated :  35994710.01835495
rho_fus pfusi 100 100
integrated :  11022043.113874383
model_beam = 0
density_model = 1: impurity = f*ne
TR step finished

========================================================================
= fastran driver: iteration number =  9

IC step
toric.step() called
cur_state_file =  s000001.00001
('Total IC power = ', 40000000.0)
power =  40000000.0
 using s000001.00001 as default state.
  ps_init_tag: Plasma State v2.055 f90 module initialization.
 Prepare toric input reading machine.inp
 ps%ns(1,0)   2.7623067349999999E+020
 <n_e(m-3)-PS> =   1.8556049539705455E+020
 <n_e(m-3)-Interpolated> =   1.8646865884621947E+020
 Thermal ion name, A, Z, dens, temp = 
 D           2           1   1.2209255587314142E+020   21.417819927111577     
 Thermal ion name, A, Z, dens, temp = 
 T           3           1   1.2209255587314142E+020   21.417819927111577     
 Thermal ion name, A, Z, dens, temp = 
 Kr          83          36   8.9015449315880883E+017   21.417819927111577     
 Fast ion name, A, Z = D_beam           2           1
 Fast ion name, A, Z = He4_fusn           4           2
('prepare_eqdsk', '/global/common/software/atom/perlmutter/binaries/geqxpl/default/geqxpl', 'g000001.00001')
  
  G-EQdsk data accepted, maximum rel. GS error:    1.9597459756210221E-002
  
  Bphi is counter-clockwise viewed from above (nsnccwb = 1)
  
  Jphi is counter-clockwise viewed from above (nsnccwi = 1)
  
 equigs_write completion code (0=normal):           0
('toric processors = ', '24')
  -- get (restore) plasma state from file -- 
 process_toric_output: cur_state_file = s000001.00001
  ps_init_tag: Plasma State v2.055 f90 module initialization.
 freq_ic, picrf  alloc? T T
 RF alloc? T         600
    number of icrf sources =            1
    number of species =            5           3
 process toric output: profile and spec sizes:
 toric mesh, PS mesh         459         101
 toric species, PS species counts           5           3
 powers in percent
 total:   100.00000000000000     
 electron total   26.626437374390342        4.2430334556737126     
 ion totals fundamental   9.4363368722195397E-004   0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000     
 ion totals harmonic   0.0000000000000000        69.129585536248726        0.0000000000000000        0.0000000000000000        0.0000000000000000     
    number of thermal species (ps%nspec_th) =            3
    number of icrf sources (ps%nicrf_src) =            1
 ps%freq_ic =    0.0000000000000000     
 ps%icrf_src_name = IC00                            
 ps%power_ic =    40000000.000000000     
 ICRF Power   40000000.000000000     
   --storing toric data in current plasma state
 Total FW Driven Current (A)   139552.90238628548     
 Total ICRF Power (W)   40000000.000000000     
 FWCD Effciency (A/W)   3.4888225596571370E-003
 Total FW Driven Current from each source-> Interpolated (A)   139552.90238628545     
 Total FW Driven Current from all sources -> Interpolated (A)   139552.90238628545     
  *ps_update_file_write: normal exit,            5  update elements written.
 Stored Partial RF Plasma State
 electron power, integral
   12347946.135392018      Watts
 FW ion power, integral
   27652053.864607632      Watts
('merged TORIC plasma state data ', '/pscratch/sd/h/hswils/github_repos/ips-fastran-tutorial/MANTA/modeleq+toric/SCAN/work/rf_ic_toric_5/RF_IC_s000001.00001')
IC step finished
EQ step
>>> efit.step() started
INPUT: PRESSURE found kinetic , mapped value =  kinetic
INPUT: RELAX_PROFILE not found, use default value: 0
INPUT: RELAX_METRIC not found, use default value: 0.5
INPUT: BETAN_TARGET not found, use default value: -1.0
model_pressure = kinetic
betan = 1.0500875320872611
INPUT: TOPOLOGY found DN , mapped value =  DN
INPUT: ERROR not found, use default value: 1.0e-4
INPUT: MAX_EFIT_ERROR not found, use default value: 0.1
init_run_step = 0
niter =  10
*** generate kfile 0
r0 = 4.55
b0 = 11.0
ip = 9999999.995
ip, ip cal, ip/(ip cal) = 10.000 10.003 1.000
weigting upper xpoint: [2, 3, 4, 5]
weigting lower xpoint: [9, 10, 11, 12]
run efit
efit, subprocess
elapsed time =  0.330  1.173
error_efit = 9.715e-05
*** generate kfile 1
apply underrelaxation
r0 = 4.55
b0 = 11.0
ip = 9999999.995
inmtric under-relax: 0.5
ip, ip cal, ip/(ip cal) = 10.000 10.000 1.000
weigting upper xpoint: [2, 3, 4, 5]
weigting lower xpoint: [9, 10, 11, 12]
diff_p = 7.675009701085812e-05
diff_f = 0.00011890276034428696
converged
  %ps_update_fromxplasma: allocating nr,nz  =          129 ,         129
  %ps_update_fromxplasma: allocating nlim   =            5
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_nclass: allocating 16 Pfirsch-Schlutter moments profiles.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_update_fromxplasma: allocating nr,nz  =          129 ,         129
  %ps_update_fromxplasma: allocating nlim   =            5
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_nclass: allocating 16 Pfirsch-Schlutter moments profiles.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_update_fromxplasma: allocating nr,nz  =          129 ,         129
  %ps_update_fromxplasma: allocating nlim   =            5
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_nclass: allocating 16 Pfirsch-Schlutter moments profiles.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_update_fromxplasma: allocating nr,nz  =          129 ,         129
  %ps_update_fromxplasma: allocating nlim   =            5
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_nclass: allocating 16 Pfirsch-Schlutter moments profiles.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_update_fromxplasma: allocating nr,nz  =          129 ,         129
  %ps_update_fromxplasma: allocating nlim   =            5
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_nclass: allocating 16 Pfirsch-Schlutter moments profiles.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_update_fromxplasma: allocating nr,nz  =          129 ,         129
  %ps_update_fromxplasma: allocating nlim   =            5
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_nclass: allocating 16 Pfirsch-Schlutter moments profiles.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
Icurt=9.997e+00MA
EQ step finished
TR step
fastran.step() entered
update_next = disabled
update_instate =  True
[1, 1, 36]
['D', 'T', 'Kr']
ion D
ion T
imp Kr
model_beam = 0
dump_vol_profile : rho_nbi pbe 0.0
dump_vol_profile : rho_nbi pbi 0.0
dump_vol_profile : rho_nbi pbth 0.0
dump_vol_profile : rho_nbi pbth 0.0
dump_vol_profile : rho_fus pfuse 35994710.01835495
dump_vol_profile : rho_fus pfusi 11022043.113874383
dump_vol_profile : rho_fus pfusth 0.0
dump_vol_profile : rho_ecrf peech 0.0
dump_vol_profile : rho_icrf picrf_totals 12347946.135392018
dump_vol_profile : rho_lhrf pelh 0.0
S_name =  ['e                               ' 'D                               '
 'T                               ' 'Kr                              ']
0 e                               
1 D                               
processing 1 D                               
dump_vol_profile : rho_icrf picrf_totals 621.1928421516237
2 T                               
processing 2 T                               
dump_vol_profile : rho_icrf picrf_totals 27651432.67176548
3 Kr                              
processing 3 Kr                              
dump_vol_profile : rho_icrf picrf_totals 0.0
dump_vol_profile : rho_lhrf pilh 0.0
dump_vol_profile : rho_nbi tqbe 0.0
dump_vol_profile : rho_nbi tqbi 0.0
dump_vol_profile : rho_nbi tqbjxb 0.0
dump_vol_profile : rho_nbi tqbth 0.0
dump_vol_profile : rho_nbi sbedep 0.0
dump_vol_profile : rho_nbi sbehalo 0.0
dump_vol_profile : rho sn_trans 0.0
dump_vol_profile : rho_rad prad 0.0
dump_vol_profile : rho pohme 0.0
/global/common/software/atom/perlmutter/binaries/fastran/default/xfastran_ver1.00_ser
ncpu =  1
n1d  =  1
nky  =  1
[1, 1, 36]
['D', 'T', 'Kr']
ion D
ion T
imp Kr
nspec_th = 3
Icurt=1.000e+01MA
Icurr_bootstrap=1.561e+00MA
Icurr_ohmic=0.000e+00MA
rho_fus pfuse 100 100
integrated :  35707475.39896408
rho_fus pfusi 100 100
integrated :  10907542.063822404
model_beam = 0
density_model = 1: impurity = f*ne
TR step finished

========================================================================
= fastran driver: finalize

EQ0 finalize
>>> efit.finalize() started
EQ0 finalize finished
TR0 finalize
fastran.finalize() entered
TR0 finalize finished
IC finalize
toric.finalize() called
IC finalize finished
EQ finalize
>>> efit.finalize() started
EQ finalize finished
TR finalize
fastran.finalize() entered
TR finalize finished
********************************************************************************
FASTRAN DIRVER FINALIZE
/pscratch/sd/h/hswils/github_repos/ips-fastran-tutorial/MANTA/modeleq+toric/SCAN/work/plasma_state/a000001.00001
/pscratch/sd/h/hswils/github_repos/ips-fastran-tutorial/MANTA/modeleq+toric/SCAN/work/plasma_state/s000001.00001
/pscratch/sd/h/hswils/github_repos/ips-fastran-tutorial/MANTA/modeleq+toric/SCAN/work/plasma_state/g000001.00001
/pscratch/sd/h/hswils/github_repos/ips-fastran-tutorial/MANTA/modeleq+toric/SCAN/work/plasma_state/i000001.00001
/pscratch/sd/h/hswils/github_repos/ips-fastran-tutorial/MANTA/modeleq+toric/SCAN/work/plasma_state/k000001.00001
/pscratch/sd/h/hswils/github_repos/ips-fastran-tutorial/MANTA/modeleq+toric/SCAN/work/plasma_state/f000001.00001

fastran_init.init() started
state_files: s000001.00001 g000001.00001 i000001.00001
create null s000001.00001
create null g000001.00001
create null i000001.00001
fastran_init.step() started
tokamak_id = FPP
shot_number = 000001
INPUT_DIR = /pscratch/sd/h/hswils/github_repos/MANTA_DBSCANS/paux_scan/input
model_beam = 0
start dakota update
update_namelist called
instate R0 updated
instate A0 updated
instate KAPPA updated
instate DELTA updated
instate B0 updated
instate IP updated
instate NE_AXIS updated
instate NE_PED updated
instate NE_SEP updated
instate TE_AXIS updated
instate TE_PED updated
instate TI_AXIS updated
instate TI_PED updated
instate XMID updated
instate XWID updated
instate H98_TARGET updated
instate_method: model
Shape from instate data array
ne from model profile, ped
te from model profile, ped
ti from model profile, ped
density_beam from model profile, parab
j_tot from model profile, parab
omega from model profile, parab
zeff from model profile, const
tbeami from model profile, const
density_alpha from model profile, zero
walpha from model profile, zero
wbeam from the model profile
density_model = 1: impurity = f*ne
init from instate: instate
usng analytic volume
end
rho_rad prad 100 100
integrated :  0.0
rho pohme 100 100
integrated :  0.0
Icurt=2.888e+00MA
rho_nbi pbe 100 100
integrated :  0.0
rho_nbi pbi 100 100
integrated :  0.0
rho_nbi sbedep 100 100
integrated :  0.0
rho_nbi tqbe 100 100
integrated :  0.0
Icurbeam=0.000e+00MA
rho_ecrf peech 100 100
integrated :  0.0
rho_icrf picrf_totals 6 100
integrated :  0.0
rho_icrf picrf_totals 6 100
integrated :  0.0
Icurech=0.000e+00MA
Icurich=0.000e+00MA
fastran_init.finalize() called
********************************************************************************
FASTRAN DIRVER INIT
PORTS (all) = ['INIT', 'DRIVER', 'EQ0', 'TR0', 'IC', 'EQ', 'TR']
PORTS = ['INIT', 'DRIVER', 'EQ0', 'TR0', 'IC', 'EQ', 'TR']
SIMULATION_MODE = NORMAL
*** t0 = 0
EQ0 init ********
>>> efit.init() started
INPUT: SCALE found 1 , mapped value =  enabled
INPUT: R0_SCALE found 1.7 , mapped value =  1.7
INPUT: B0_SCALE found 2.0 , mapped value =  2.0
efit time = 1
init_run =  1
force free
scaled  1.7 2.0
NCAPTC: : NetCDF: Variable not found
Warning: ieee_overflow is signaling
Warning: ieee_underflow is signaling
Warning: ieee_inexact is signaling
FORTRAN STOP
ps_update disabled
Icurt=2.862e+00MA
TR0 init ********
fastran.init() entered
IC init ********
toric.init() called
('touching ', 'torica.inp')
('touching ', 'machine.inp')
('touching ', 'log.toric')
('touching ', 'toric.nc')
('touching ', 'profstat.dat')
('touching ', 'equigs.data')
('touching ', 'equidt.data')
('touching ', 'toric_cfg.nc')
EQ init ********
>>> efit.init() started
INPUT: SCALE found 1 , mapped value =  enabled
INPUT: R0_SCALE found 1.7 , mapped value =  1.7
INPUT: B0_SCALE found 2.0 , mapped value =  2.0
efit time = 0
init_run =  0
TR init ********
fastran.init() entered
nstep_pre: 5

========================================================================
= fastran driver: preprocess iteration number =  0

EQ0 step
>>> efit.step() started
INPUT: PRESSURE found kinetic , mapped value =  kinetic
INPUT: RELAX_PROFILE not found, use default value: 0
INPUT: RELAX_METRIC not found, use default value: 0.5
INPUT: BETAN_TARGET not found, use default value: -1.0
model_pressure = kinetic
betan = 1.4762832323068469
INPUT: TOPOLOGY found DN , mapped value =  DN
INPUT: ERROR not found, use default value: 1.0e-4
INPUT: MAX_EFIT_ERROR not found, use default value: 0.1
init_run_step = 0
niter =  10
*** generate kfile 0
r0 = 4.55
b0 = 11.0
ip = 9999999.995
ip, ip cal, ip/(ip cal) = 10.000 2.863 3.493
weigting upper xpoint: [2, 3, 4, 5]
weigting lower xpoint: [9, 10, 11, 12]
run efit
efit, subprocess
elapsed time =  0.354  1.257
error_efit = 7.739e-05
*** generate kfile 1
apply underrelaxation
r0 = 4.55
b0 = 11.0
ip = 9999999.995
inmtric under-relax: 0.5
ip, ip cal, ip/(ip cal) = 10.000 2.841 3.519
weigting upper xpoint: [2, 3, 4, 5]
weigting lower xpoint: [9, 10, 11, 12]
diff_p = 0.12421046208890986
diff_f = 0.3172183574102615
run efit
efit, subprocess
elapsed time =  0.416  1.167
error_efit = 8.086e-05
*** generate kfile 2
apply underrelaxation
r0 = 4.55
b0 = 11.0
ip = 9999999.995
inmtric under-relax: 0.5
ip, ip cal, ip/(ip cal) = 10.000 2.816 3.551
weigting upper xpoint: [2, 3, 4, 5]
weigting lower xpoint: [9, 10, 11, 12]
diff_p = 0.11232745053159496
diff_f = 0.21550209262047468
run efit
efit, subprocess
elapsed time =  0.414  1.179
error_efit = 7.395e-05
*** generate kfile 3
apply underrelaxation
r0 = 4.55
b0 = 11.0
ip = 9999999.995
inmtric under-relax: 0.5
ip, ip cal, ip/(ip cal) = 10.000 2.791 3.582
weigting upper xpoint: [2, 3, 4, 5]
weigting lower xpoint: [9, 10, 11, 12]
diff_p = 0.07659151373321213
diff_f = 0.12392784455247798
run efit
efit, subprocess
elapsed time =  0.406  1.172
error_efit = 7.489e-05
*** generate kfile 4
apply underrelaxation
r0 = 4.55
b0 = 11.0
ip = 9999999.995
  ps_init_tag: Plasma State v2.055 f90 module initialization.
  %ps_update_fromxplasma: allocating nr,nz  =          129 ,         129
  %ps_update_fromxplasma: allocating nlim   =            5
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_nclass: allocating 16 Pfirsch-Schlutter moments profiles.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_update_fromxplasma: allocating nr,nz  =          129 ,         129
  %ps_update_fromxplasma: allocating nlim   =            5
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_nclass: allocating 16 Pfirsch-Schlutter moments profiles.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_update_fromxplasma: allocating nr,nz  =          129 ,         129
  %ps_update_fromxplasma: allocating nlim   =            5
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_nclass: allocating 16 Pfirsch-Schlutter moments profiles.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_update_fromxplasma: allocating nr,nz  =          129 ,         129
  %ps_update_fromxplasma: allocating nlim   =            5
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_nclass: allocating 16 Pfirsch-Schlutter moments profiles.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_update_fromxplasma: allocating nr,nz  =          129 ,         129
  %ps_update_fromxplasma: allocating nlim   =            5
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_nclass: allocating 16 Pfirsch-Schlutter moments profiles.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_update_fromxplasma: allocating nr,nz  =          129 ,         129
  %ps_update_fromxplasma: allocating nlim   =            5
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_nclass: allocating 16 Pfirsch-Schlutter moments profiles.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_update_fromxplasma: allocating nr,nz  =          129 ,         129
  %ps_update_fromxplasma: allocating nlim   =            5
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_nclass: allocating 16 Pfirsch-Schlutter moments profiles.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
inmtric under-relax: 0.5
ip, ip cal, ip/(ip cal) = 10.000 2.772 3.607
weigting upper xpoint: [2, 3, 4, 5]
weigting lower xpoint: [9, 10, 11, 12]
diff_p = 0.04554075802838621
diff_f = 0.06786640579481915
run efit
efit, subprocess
elapsed time =  0.396  1.159
error_efit = 8.873e-05
*** generate kfile 5
apply underrelaxation
r0 = 4.55
b0 = 11.0
ip = 9999999.995
inmtric under-relax: 0.5
ip, ip cal, ip/(ip cal) = 10.000 2.758 3.625
weigting upper xpoint: [2, 3, 4, 5]
weigting lower xpoint: [9, 10, 11, 12]
diff_p = 0.024842056802174925
diff_f = 0.03611598489580053
run efit
efit, subprocess
elapsed time =  0.416  1.154
error_efit = 8.807e-05
*** generate kfile 6
apply underrelaxation
r0 = 4.55
b0 = 11.0
ip = 9999999.995
inmtric under-relax: 0.5
ip, ip cal, ip/(ip cal) = 10.000 2.749 3.638
weigting upper xpoint: [2, 3, 4, 5]
weigting lower xpoint: [9, 10, 11, 12]
diff_p = 0.012702826364672872
diff_f = 0.018832879400445292
run efit
efit, subprocess
elapsed time =  0.406  1.162
error_efit = 8.225e-05
*** generate kfile 7
apply underrelaxation
r0 = 4.55
b0 = 11.0
ip = 9999999.995
inmtric under-relax: 0.5
ip, ip cal, ip/(ip cal) = 10.000 2.743 3.645
weigting upper xpoint: [2, 3, 4, 5]
weigting lower xpoint: [9, 10, 11, 12]
diff_p = 0.0061906328178234805
diff_f = 0.009691517963003321
converged
Icurt=2.738e+00MA
EQ0 step finished
TR0 step
fastran.step() entered
update_next = disabled
update_instate =  True
[1, 1, 36]
['D', 'T', 'Kr']
ion D
ion T
imp Kr
model_beam = 0
dump_vol_profile : rho_nbi pbe 0.0
dump_vol_profile : rho_nbi pbi 0.0
dump_vol_profile : rho_nbi pbth 0.0
dump_vol_profile : rho_nbi pbth 0.0
dump_vol_profile : rho_fus pfuse 0.0
dump_vol_profile : rho_fus pfusi 0.0
dump_vol_profile : rho_fus pfusth 0.0
dump_vol_profile : rho_ecrf peech 0.0
dump_vol_profile : rho_icrf picrf_totals 0.0
dump_vol_profile : rho_lhrf pelh 0.0
S_name =  ['e                               ' 'D                               '
 'T                               ' 'Kr                              ']
0 e                               
1 D                               
processing 1 D                               
dump_vol_profile : rho_icrf picrf_totals 0.0
2 T                               
processing 2 T                               
dump_vol_profile : rho_icrf picrf_totals 0.0
3 Kr                              
processing 3 Kr                              
dump_vol_profile : rho_icrf picrf_totals 0.0
dump_vol_profile : rho_lhrf pilh 0.0
dump_vol_profile : rho_nbi tqbe 0.0
dump_vol_profile : rho_nbi tqbi 0.0
dump_vol_profile : rho_nbi tqbjxb 0.0
dump_vol_profile : rho_nbi tqbth 0.0
dump_vol_profile : rho_nbi sbedep 0.0
dump_vol_profile : rho_nbi sbehalo 0.0
dump_vol_profile : rho sn_trans 0.0
dump_vol_profile : rho_rad prad 0.0
dump_vol_profile : rho pohme 0.0
/global/common/software/atom/perlmutter/binaries/fastran/default/xfastran_ver1.00_ser
ncpu =  1
n1d  =  1
nky  =  1
[1, 1, 36]
['D', 'T', 'Kr']
ion D
ion T
imp Kr
nspec_th = 3
Icurt=1.000e+01MA
Icurr_bootstrap=2.119e+00MA
Icurr_ohmic=0.000e+00MA
rho_fus pfuse 100 100
integrated :  64119571.776243955
rho_fus pfusi 100 100
integrated :  20575135.61396615
model_beam = 0
density_model = 1: impurity = f*ne
TR0 step finished

========================================================================
= fastran driver: preprocess iteration number =  1

EQ0 step
>>> efit.step() started
INPUT: PRESSURE found kinetic , mapped value =  kinetic
INPUT: RELAX_PROFILE not found, use default value: 0
INPUT: RELAX_METRIC not found, use default value: 0.5
INPUT: BETAN_TARGET not found, use default value: -1.0
model_pressure = kinetic
betan = 1.4624095635816408
INPUT: TOPOLOGY found DN , mapped value =  DN
INPUT: ERROR not found, use default value: 1.0e-4
INPUT: MAX_EFIT_ERROR not found, use default value: 0.1
init_run_step = 0
niter =  10
*** generate kfile 0
r0 = 4.55
b0 = 11.0
ip = 9999999.995
ip, ip cal, ip/(ip cal) = 10.000 10.002 1.000
weigting upper xpoint: [2, 3, 4, 5]
weigting lower xpoint: [9, 10, 11, 12]
run efit
efit, subprocess
elapsed time =  0.330  1.158
error_efit = 7.061e-05
*** generate kfile 1
apply underrelaxation
r0 = 4.55
b0 = 11.0
ip = 9999999.995
inmtric under-relax: 0.5
ip, ip cal, ip/(ip cal) = 10.000 9.997 1.000
weigting upper xpoint: [2, 3, 4, 5]
weigting lower xpoint: [9, 10, 11, 12]
diff_p = 0.00019799104693422607
diff_f = 8.35647847990051e-05
converged
  %ps_update_fromxplasma: allocating nr,nz  =          129 ,         129
  %ps_update_fromxplasma: allocating nlim   =            5
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_nclass: allocating 16 Pfirsch-Schlutter moments profiles.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_update_fromxplasma: allocating nr,nz  =          129 ,         129
  %ps_update_fromxplasma: allocating nlim   =            5
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_nclass: allocating 16 Pfirsch-Schlutter moments profiles.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_update_fromxplasma: allocating nr,nz  =          129 ,         129
  %ps_update_fromxplasma: allocating nlim   =            5
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_nclass: allocating 16 Pfirsch-Schlutter moments profiles.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_update_fromxplasma: allocating nr,nz  =          129 ,         129
  %ps_update_fromxplasma: allocating nlim   =            5
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_nclass: allocating 16 Pfirsch-Schlutter moments profiles.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_update_fromxplasma: allocating nr,nz  =          129 ,         129
  %ps_update_fromxplasma: allocating nlim   =            5
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_nclass: allocating 16 Pfirsch-Schlutter moments profiles.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_update_fromxplasma: allocating nr,nz  =          129 ,         129
  %ps_update_fromxplasma: allocating nlim   =            5
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_nclass: allocating 16 Pfirsch-Schlutter moments profiles.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
Icurt=9.993e+00MA
EQ0 step finished
TR0 step
fastran.step() entered
update_next = disabled
update_instate =  True
[1, 1, 36]
['D', 'T', 'Kr']
ion D
ion T
imp Kr
model_beam = 0
dump_vol_profile : rho_nbi pbe 0.0
dump_vol_profile : rho_nbi pbi 0.0
dump_vol_profile : rho_nbi pbth 0.0
dump_vol_profile : rho_nbi pbth 0.0
dump_vol_profile : rho_fus pfuse 64119571.776243955
dump_vol_profile : rho_fus pfusi 20575135.61396615
dump_vol_profile : rho_fus pfusth 0.0
dump_vol_profile : rho_ecrf peech 0.0
dump_vol_profile : rho_icrf picrf_totals 0.0
dump_vol_profile : rho_lhrf pelh 0.0
S_name =  ['e                               ' 'D                               '
 'T                               ' 'Kr                              ']
0 e                               
1 D                               
processing 1 D                               
dump_vol_profile : rho_icrf picrf_totals 0.0
2 T                               
processing 2 T                               
dump_vol_profile : rho_icrf picrf_totals 0.0
3 Kr                              
processing 3 Kr                              
dump_vol_profile : rho_icrf picrf_totals 0.0
dump_vol_profile : rho_lhrf pilh 0.0
dump_vol_profile : rho_nbi tqbe 0.0
dump_vol_profile : rho_nbi tqbi 0.0
dump_vol_profile : rho_nbi tqbjxb 0.0
dump_vol_profile : rho_nbi tqbth 0.0
dump_vol_profile : rho_nbi sbedep 0.0
dump_vol_profile : rho_nbi sbehalo 0.0
dump_vol_profile : rho sn_trans 0.0
dump_vol_profile : rho_rad prad 0.0
dump_vol_profile : rho pohme 0.0
/global/common/software/atom/perlmutter/binaries/fastran/default/xfastran_ver1.00_ser
ncpu =  1
n1d  =  1
nky  =  1
[1, 1, 36]
['D', 'T', 'Kr']
ion D
ion T
imp Kr
nspec_th = 3
Icurt=1.000e+01MA
Icurr_bootstrap=2.115e+00MA
Icurr_ohmic=0.000e+00MA
rho_fus pfuse 100 100
integrated :  63515582.291253254
rho_fus pfusi 100 100
integrated :  20317737.626921613
model_beam = 0
density_model = 1: impurity = f*ne
TR0 step finished

========================================================================
= fastran driver: preprocess iteration number =  2

EQ0 step
>>> efit.step() started
INPUT: PRESSURE found kinetic , mapped value =  kinetic
INPUT: RELAX_PROFILE not found, use default value: 0
INPUT: RELAX_METRIC not found, use default value: 0.5
INPUT: BETAN_TARGET not found, use default value: -1.0
model_pressure = kinetic
betan = 1.4583300783598705
INPUT: TOPOLOGY found DN , mapped value =  DN
INPUT: ERROR not found, use default value: 1.0e-4
INPUT: MAX_EFIT_ERROR not found, use default value: 0.1
init_run_step = 0
niter =  10
*** generate kfile 0
r0 = 4.55
b0 = 11.0
ip = 9999999.995
ip, ip cal, ip/(ip cal) = 10.000 10.003 1.000
weigting upper xpoint: [2, 3, 4, 5]
weigting lower xpoint: [9, 10, 11, 12]
run efit
efit, subprocess
elapsed time =  0.339  1.158
error_efit = 7.098e-05
*** generate kfile 1
apply underrelaxation
r0 = 4.55
b0 = 11.0
ip = 9999999.995
inmtric under-relax: 0.5
ip, ip cal, ip/(ip cal) = 10.000 10.002 1.000
weigting upper xpoint: [2, 3, 4, 5]
weigting lower xpoint: [9, 10, 11, 12]
diff_p = 5.329789739754638e-05
diff_f = 1.6545918473850088e-05
converged
Icurt=1.000e+01MA
EQ0 step finished
TR0 step
fastran.step() entered
update_next = disabled
update_instate =  True
[1, 1, 36]
['D', 'T', 'Kr']
ion D
ion T
imp Kr
model_beam = 0
dump_vol_profile : rho_nbi pbe 0.0
dump_vol_profile : rho_nbi pbi 0.0
dump_vol_profile : rho_nbi pbth 0.0
dump_vol_profile : rho_nbi pbth 0.0
dump_vol_profile : rho_fus pfuse 63515582.291253254
dump_vol_profile : rho_fus pfusi 20317737.626921613
dump_vol_profile : rho_fus pfusth 0.0
dump_vol_profile : rho_ecrf peech 0.0
dump_vol_profile : rho_icrf picrf_totals 0.0
dump_vol_profile : rho_lhrf pelh 0.0
S_name =  ['e                               ' 'D                               '
 'T                               ' 'Kr                              ']
0 e                               
1 D                               
processing 1 D                               
dump_vol_profile : rho_icrf picrf_totals 0.0
2 T                               
processing 2 T                               
dump_vol_profile : rho_icrf picrf_totals 0.0
3 Kr                              
processing 3 Kr                              
dump_vol_profile : rho_icrf picrf_totals 0.0
dump_vol_profile : rho_lhrf pilh 0.0
dump_vol_profile : rho_nbi tqbe 0.0
dump_vol_profile : rho_nbi tqbi 0.0
dump_vol_profile : rho_nbi tqbjxb 0.0
dump_vol_profile : rho_nbi tqbth 0.0
dump_vol_profile : rho_nbi sbedep 0.0
dump_vol_profile : rho_nbi sbehalo 0.0
dump_vol_profile : rho sn_trans 0.0
dump_vol_profile : rho_rad prad 0.0
dump_vol_profile : rho pohme 0.0
/global/common/software/atom/perlmutter/binaries/fastran/default/xfastran_ver1.00_ser
ncpu =  1
n1d  =  1
nky  =  1
[1, 1, 36]
['D', 'T', 'Kr']
ion D
ion T
imp Kr
nspec_th = 3
Icurt=1.000e+01MA
Icurr_bootstrap=2.111e+00MA
Icurr_ohmic=0.000e+00MA
rho_fus pfuse 100 100
integrated :  62969878.3974907
rho_fus pfusi 100 100
integrated :  20081439.23867171
model_beam = 0
density_model = 1: impurity = f*ne
TR0 step finished

========================================================================
= fastran driver: preprocess iteration number =  3

EQ0 step
>>> efit.step() started
INPUT: PRESSURE found kinetic , mapped value =  kinetic
INPUT: RELAX_PROFILE not found, use default value: 0
INPUT: RELAX_METRIC not found, use default value: 0.5
INPUT: BETAN_TARGET not found, use default value: -1.0
model_pressure = kinetic
betan = 1.4547355547967766
INPUT: TOPOLOGY found DN , mapped value =  DN
INPUT: ERROR not found, use default value: 1.0e-4
INPUT: MAX_EFIT_ERROR not found, use default value: 0.1
init_run_step = 0
niter =  10
*** generate kfile 0
r0 = 4.55
b0 = 11.0
ip = 9999999.995
ip, ip cal, ip/(ip cal) = 10.000 10.003 1.000
weigting upper xpoint: [2, 3, 4, 5]
weigting lower xpoint: [9, 10, 11, 12]
run efit
efit, subprocess
elapsed time =  0.329  1.148
error_efit = 7.106e-05
*** generate kfile 1
apply underrelaxation
r0 = 4.55
b0 = 11.0
ip = 9999999.995
inmtric under-relax: 0.5
ip, ip cal, ip/(ip cal) = 10.000 10.002 1.000
weigting upper xpoint: [2, 3, 4, 5]
weigting lower xpoint: [9, 10, 11, 12]
diff_p = 9.533745161708798e-05
diff_f = 6.697820163064052e-05
converged
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_update_fromxplasma: allocating nr,nz  =          129 ,         129
  %ps_update_fromxplasma: allocating nlim   =            5
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_nclass: allocating 16 Pfirsch-Schlutter moments profiles.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_update_fromxplasma: allocating nr,nz  =          129 ,         129
  %ps_update_fromxplasma: allocating nlim   =            5
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_nclass: allocating 16 Pfirsch-Schlutter moments profiles.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_update_fromxplasma: allocating nr,nz  =          129 ,         129
  %ps_update_fromxplasma: allocating nlim   =            5
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_nclass: allocating 16 Pfirsch-Schlutter moments profiles.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_update_fromxplasma: allocating nr,nz  =          129 ,         129
  %ps_update_fromxplasma: allocating nlim   =            5
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_nclass: allocating 16 Pfirsch-Schlutter moments profiles.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_update_fromxplasma: allocating nr,nz  =          129 ,         129
  %ps_update_fromxplasma: allocating nlim   =            5
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_nclass: allocating 16 Pfirsch-Schlutter moments profiles.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_update_fromxplasma: allocating nr,nz  =          129 ,         129
  %ps_update_fromxplasma: allocating nlim   =            5
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_nclass: allocating 16 Pfirsch-Schlutter moments profiles.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
Icurt=1.000e+01MA
EQ0 step finished
TR0 step
fastran.step() entered
update_next = disabled
update_instate =  True
[1, 1, 36]
['D', 'T', 'Kr']
ion D
ion T
imp Kr
model_beam = 0
dump_vol_profile : rho_nbi pbe 0.0
dump_vol_profile : rho_nbi pbi 0.0
dump_vol_profile : rho_nbi pbth 0.0
dump_vol_profile : rho_nbi pbth 0.0
dump_vol_profile : rho_fus pfuse 62969878.3974907
dump_vol_profile : rho_fus pfusi 20081439.23867171
dump_vol_profile : rho_fus pfusth 0.0
dump_vol_profile : rho_ecrf peech 0.0
dump_vol_profile : rho_icrf picrf_totals 0.0
dump_vol_profile : rho_lhrf pelh 0.0
S_name =  ['e                               ' 'D                               '
 'T                               ' 'Kr                              ']
0 e                               
1 D                               
processing 1 D                               
dump_vol_profile : rho_icrf picrf_totals 0.0
2 T                               
processing 2 T                               
dump_vol_profile : rho_icrf picrf_totals 0.0
3 Kr                              
processing 3 Kr                              
dump_vol_profile : rho_icrf picrf_totals 0.0
dump_vol_profile : rho_lhrf pilh 0.0
dump_vol_profile : rho_nbi tqbe 0.0
dump_vol_profile : rho_nbi tqbi 0.0
dump_vol_profile : rho_nbi tqbjxb 0.0
dump_vol_profile : rho_nbi tqbth 0.0
dump_vol_profile : rho_nbi sbedep 0.0
dump_vol_profile : rho_nbi sbehalo 0.0
dump_vol_profile : rho sn_trans 0.0
dump_vol_profile : rho_rad prad 0.0
dump_vol_profile : rho pohme 0.0
/global/common/software/atom/perlmutter/binaries/fastran/default/xfastran_ver1.00_ser
ncpu =  1
n1d  =  1
nky  =  1
[1, 1, 36]
['D', 'T', 'Kr']
ion D
ion T
imp Kr
nspec_th = 3
Icurt=1.000e+01MA
Icurr_bootstrap=2.107e+00MA
Icurr_ohmic=0.000e+00MA
rho_fus pfuse 100 100
integrated :  62430238.36105268
rho_fus pfusi 100 100
integrated :  19848517.954911772
model_beam = 0
density_model = 1: impurity = f*ne
TR0 step finished

========================================================================
= fastran driver: preprocess iteration number =  4

EQ0 step
>>> efit.step() started
INPUT: PRESSURE found kinetic , mapped value =  kinetic
INPUT: RELAX_PROFILE not found, use default value: 0
INPUT: RELAX_METRIC not found, use default value: 0.5
INPUT: BETAN_TARGET not found, use default value: -1.0
model_pressure = kinetic
betan = 1.451165836661081
INPUT: TOPOLOGY found DN , mapped value =  DN
INPUT: ERROR not found, use default value: 1.0e-4
INPUT: MAX_EFIT_ERROR not found, use default value: 0.1
init_run_step = 0
niter =  10
*** generate kfile 0
r0 = 4.55
b0 = 11.0
ip = 9999999.995
ip, ip cal, ip/(ip cal) = 10.000 10.003 1.000
weigting upper xpoint: [2, 3, 4, 5]
weigting lower xpoint: [9, 10, 11, 12]
run efit
efit, subprocess
elapsed time =  0.343  1.166
error_efit = 7.141e-05
*** generate kfile 1
apply underrelaxation
r0 = 4.55
b0 = 11.0
ip = 9999999.995
inmtric under-relax: 0.5
ip, ip cal, ip/(ip cal) = 10.000 10.002 1.000
weigting upper xpoint: [2, 3, 4, 5]
weigting lower xpoint: [9, 10, 11, 12]
diff_p = 9.145778563430567e-05
diff_f = 6.135203674039343e-05
converged
Icurt=1.000e+01MA
EQ0 step finished
TR0 step
fastran.step() entered
update_next = disabled
update_instate =  True
[1, 1, 36]
['D', 'T', 'Kr']
ion D
ion T
imp Kr
model_beam = 0
dump_vol_profile : rho_nbi pbe 0.0
dump_vol_profile : rho_nbi pbi 0.0
dump_vol_profile : rho_nbi pbth 0.0
dump_vol_profile : rho_nbi pbth 0.0
dump_vol_profile : rho_fus pfuse 62430238.36105268
dump_vol_profile : rho_fus pfusi 19848517.954911772
dump_vol_profile : rho_fus pfusth 0.0
dump_vol_profile : rho_ecrf peech 0.0
dump_vol_profile : rho_icrf picrf_totals 0.0
dump_vol_profile : rho_lhrf pelh 0.0
S_name =  ['e                               ' 'D                               '
 'T                               ' 'Kr                              ']
0 e                               
1 D                               
processing 1 D                               
dump_vol_profile : rho_icrf picrf_totals 0.0
2 T                               
processing 2 T                               
dump_vol_profile : rho_icrf picrf_totals 0.0
3 Kr                              
processing 3 Kr                              
dump_vol_profile : rho_icrf picrf_totals 0.0
dump_vol_profile : rho_lhrf pilh 0.0
dump_vol_profile : rho_nbi tqbe 0.0
dump_vol_profile : rho_nbi tqbi 0.0
dump_vol_profile : rho_nbi tqbjxb 0.0
dump_vol_profile : rho_nbi tqbth 0.0
dump_vol_profile : rho_nbi sbedep 0.0
dump_vol_profile : rho_nbi sbehalo 0.0
dump_vol_profile : rho sn_trans 0.0
dump_vol_profile : rho_rad prad 0.0
dump_vol_profile : rho pohme 0.0
/global/common/software/atom/perlmutter/binaries/fastran/default/xfastran_ver1.00_ser
ncpu =  1
n1d  =  1
nky  =  1
[1, 1, 36]
['D', 'T', 'Kr']
ion D
ion T
imp Kr
nspec_th = 3
Icurt=1.000e+01MA
Icurr_bootstrap=2.104e+00MA
Icurr_ohmic=0.000e+00MA
rho_fus pfuse 100 100
integrated :  61897213.545656875
rho_fus pfusi 100 100
integrated :  19619140.478895802
model_beam = 0
density_model = 1: impurity = f*ne
TR0 step finished
number of iteration : 10

========================================================================
= fastran driver: iteration number =  0

IC step
toric.step() called
cur_state_file =  s000001.00001
('Total IC power = ', 20000000.0)
power =  20000000.0
 using s000001.00001 as default state.
  ps_init_tag: Plasma State v2.055 f90 module initialization.
 Prepare toric input reading machine.inp
 ps%ns(1,0)   2.7622773930000001E+020
 <n_e(m-3)-PS> =   1.9370088856280629E+020
 <n_e(m-3)-Interpolated> =   1.9459009730894594E+020
 Thermal ion name, A, Z, dens, temp = 
 D           2           1   1.2930307719799202E+020   19.013667559999998     
 Thermal ion name, A, Z, dens, temp = 
 T           3           1   1.2930307719799202E+020   19.013667559999998     
 Thermal ion name, A, Z, dens, temp = 
 Kr          83          36   4.8948846955600000E+017   19.013667559999998     
 Fast ion name, A, Z = D_beam           2           1
 Fast ion name, A, Z = He4_fusn           4           2
('prepare_eqdsk', '/global/common/software/atom/perlmutter/binaries/geqxpl/default/geqxpl', 'g000001.00001')
Note: The following floating-point exceptions are signalling: IEEE_UNDERFLOW_FLAG IEEE_DENORMAL
  
  G-EQdsk data accepted, maximum rel. GS error:    4.9273398323101847E-002
  
  Bphi is counter-clockwise viewed from above (nsnccwb = 1)
  
  Jphi is counter-clockwise viewed from above (nsnccwi = 1)
  
 equigs_write completion code (0=normal):           0
('toric processors = ', '24')
  -- get (restore) plasma state from file -- 
 process_toric_output: cur_state_file = s000001.00001
  ps_init_tag: Plasma State v2.055 f90 module initialization.
 freq_ic, picrf  alloc? T T
 RF alloc? T         600
    number of icrf sources =            1
    number of species =            5           3
 process toric output: profile and spec sizes:
 toric mesh, PS mesh         459         101
 toric species, PS species counts           5           3
 powers in percent
 total:   99.999999999999986     
 electron total   26.905397371417248        5.5057323657163746     
 ion totals fundamental   1.7484289476262847E-003   0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000     
 ion totals harmonic   0.0000000000000000        67.587121833918744        0.0000000000000000        0.0000000000000000        0.0000000000000000     
    number of thermal species (ps%nspec_th) =            3
    number of icrf sources (ps%nicrf_src) =            1
 ps%freq_ic =    0.0000000000000000     
 ps%icrf_src_name = IC00                            
 ps%power_ic =    20000000.000000000     
 ICRF Power   20000000.000000000     
   --storing toric data in current plasma state
 Total FW Driven Current (A)   98062.746384801212     
 Total ICRF Power (W)   20000000.000000000     
 FWCD Effciency (A/W)   4.9031373192400607E-003
 Total FW Driven Current from each source-> Interpolated (A)   98062.746384801241     
 Total FW Driven Current from all sources -> Interpolated (A)   98062.746384801241     
  *ps_update_file_write: normal exit,            6  update elements written.
 Stored Partial RF Plasma State
 electron power, integral
   6482586.3989705835      Watts
 FW ion power, integral
   13517413.601029100      Watts
error but neglected...
IC step finished
EQ step
>>> efit.step() started
INPUT: PRESSURE found kinetic , mapped value =  kinetic
INPUT: RELAX_PROFILE not found, use default value: 0
INPUT: RELAX_METRIC not found, use default value: 0.5
INPUT: BETAN_TARGET not found, use default value: -1.0
model_pressure = kinetic
betan = 1.44763189332137
INPUT: TOPOLOGY found DN , mapped value =  DN
INPUT: ERROR not found, use default value: 1.0e-4
INPUT: MAX_EFIT_ERROR not found, use default value: 0.1
init_run_step = 0
niter =  10
*** generate kfile 0
r0 = 4.55
b0 = 11.0
ip = 9999999.995
ip, ip cal, ip/(ip cal) = 10.000 10.003 1.000
weigting upper xpoint: [2, 3, 4, 5]
weigting lower xpoint: [9, 10, 11, 12]
run efit
efit, subprocess
elapsed time =  0.367  1.175
error_efit = 7.156e-05
*** generate kfile 1
apply underrelaxation
r0 = 4.55
b0 = 11.0
ip = 9999999.995
inmtric under-relax: 0.5
ip, ip cal, ip/(ip cal) = 10.000 10.002 1.000
weigting upper xpoint: [2, 3, 4, 5]
weigting lower xpoint: [9, 10, 11, 12]
diff_p = 9.4149585572117e-05
diff_f = 6.349645399177012e-05
converged
Icurt=1.000e+01MA
EQ step finished
TR step
fastran.step() entered
update_next = disabled
update_instate =  True
[1, 1, 36]
['D', 'T', 'Kr']
ion D
ion T
imp Kr
model_beam = 0
dump_vol_profile : rho_nbi pbe 0.0
dump_vol_profile : rho_nbi pbi 0.0
dump_vol_profile : rho_nbi pbth 0.0
dump_vol_profile : rho_nbi pbth 0.0
dump_vol_profile : rho_fus pfuse 61897213.545656875
dump_vol_profile : rho_fus pfusi 19619140.478895802
dump_vol_profile : rho_fus pfusth 0.0
dump_vol_profile : rho_ecrf peech 0.0
dump_vol_profile : rho_icrf picrf_totals 6482586.398970583
dump_vol_profile : rho_lhrf pelh 0.0
S_name =  ['e                               ' 'D                               '
 'T                               ' 'Kr                              ']
0 e                               
1 D                               
processing 1 D                               
dump_vol_profile : rho_icrf picrf_totals 435.58327799500427
2 T                               
processing 2 T                               
dump_vol_profile : rho_icrf picrf_totals 13516978.017751105
3 Kr                              
processing 3 Kr                              
dump_vol_profile : rho_icrf picrf_totals 0.0
dump_vol_profile : rho_lhrf pilh 0.0
dump_vol_profile : rho_nbi tqbe 0.0
dump_vol_profile : rho_nbi tqbi 0.0
dump_vol_profile : rho_nbi tqbjxb 0.0
dump_vol_profile : rho_nbi tqbth 0.0
dump_vol_profile : rho_nbi sbedep 0.0
dump_vol_profile : rho_nbi sbehalo 0.0
dump_vol_profile : rho sn_trans 0.0
dump_vol_profile : rho_rad prad 0.0
dump_vol_profile : rho pohme 0.0
/global/common/software/atom/perlmutter/binaries/fastran/default/xfastran_ver1.00_ser
ncpu =  1
n1d  =  1
nky  =  1
[1, 1, 36]
['D', 'T', 'Kr']
ion D
ion T
imp Kr
nspec_th = 3
Icurt=1.000e+01MA
Icurr_bootstrap=1.824e+00MA
Icurr_ohmic=0.000e+00MA
rho_fus pfuse 100 100
integrated :  45030469.966176875
rho_fus pfusi 100 100
integrated :  13834476.542402858
model_beam = 0
density_model = 1: impurity = f*ne
TR step finished

========================================================================
= fastran driver: iteration number =  1

IC step
toric.step() called
cur_state_file =  s000001.00001
('Total IC power = ', 20000000.0)
power =  20000000.0
 using s000001.00001 as default state.
  ps_init_tag: Plasma State v2.055 f90 module initialization.
 Prepare toric input reading machine.inp
 ps%ns(1,0)   2.7622773930000001E+020
 <n_e(m-3)-PS> =   1.9369298368779040E+020
 <n_e(m-3)-Interpolated> =   1.9458895399353025E+020
 Thermal ion name, A, Z, dens, temp = 
 D           2           1   1.2860143795530115E+020   18.902287658394563     
 Thermal ion name, A, Z, dens, temp = 
 T           3           1   1.2860143795530115E+020   18.902287658394563     
 Thermal ion name, A, Z, dens, temp = 
 Kr          83          36   5.2846842748327078E+017   18.902287658394563     
 Fast ion name, A, Z = D_beam           2           1
 Fast ion name, A, Z = He4_fusn           4           2
('prepare_eqdsk', '/global/common/software/atom/perlmutter/binaries/geqxpl/default/geqxpl', 'g000001.00001')
Note: The following floating-point exceptions are signalling: IEEE_UNDERFLOW_FLAG IEEE_DENORMAL
  
  G-EQdsk data accepted, maximum rel. GS error:    4.9953363453778613E-002
  
  Bphi is counter-clockwise viewed from above (nsnccwb = 1)
  
  Jphi is counter-clockwise viewed from above (nsnccwi = 1)
  
 equigs_write completion code (0=normal):           0
('toric processors = ', '24')
  -- get (restore) plasma state from file -- 
 process_toric_output: cur_state_file = s000001.00001
  ps_init_tag: Plasma State v2.055 f90 module initialization.
 freq_ic, picrf  alloc? T T
 RF alloc? T         600
    number of icrf sources =            1
    number of species =            5           3
 process toric output: profile and spec sizes:
 toric mesh, PS mesh         459         101
 toric species, PS species counts           5           3
 powers in percent
 total:   100.00000000000000     
 electron total   25.595416239229433        5.8205789296664623     
 ion totals fundamental   1.6726358692083763E-003   0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000     
 ion totals harmonic   0.0000000000000000        68.582332195234898        0.0000000000000000        0.0000000000000000        0.0000000000000000     
    number of thermal species (ps%nspec_th) =            3
    number of icrf sources (ps%nicrf_src) =            1
 ps%freq_ic =    0.0000000000000000     
 ps%icrf_src_name = IC00                            
 ps%power_ic =    20000000.000000000     
 ICRF Power   20000000.000000000     
   --storing toric data in current plasma state
 Total FW Driven Current (A)   89052.222416877266     
 Total ICRF Power (W)   20000000.000000000     
 FWCD Effciency (A/W)   4.4526111208438631E-003
 Total FW Driven Current from each source-> Interpolated (A)   89052.222416877295     
 Total FW Driven Current from all sources -> Interpolated (A)   89052.222416877295     
  *ps_update_file_write: normal exit,            5  update elements written.
 Stored Partial RF Plasma State
 electron power, integral
   6283848.0539514339      Watts
 FW ion power, integral
   13716151.946048383      Watts
('merged TORIC plasma state data ', '/pscratch/sd/h/hswils/github_repos/MANTA_DBSCANS/paux_scan/SCAN/simulation_300831_0000/work/rf_ic_toric_8/RF_IC_s000001.00001')
IC step finished
EQ step
>>> efit.step() started
INPUT: PRESSURE found kinetic , mapped value =  kinetic
INPUT: RELAX_PROFILE not found, use default value: 0
INPUT: RELAX_METRIC not found, use default value: 0.5
INPUT: BETAN_TARGET not found, use default value: -1.0
model_pressure = kinetic
betan = 1.3894299604668936
INPUT: TOPOLOGY found DN , mapped value =  DN
INPUT: ERROR not found, use default value: 1.0e-4
INPUT: MAX_EFIT_ERROR not found, use default value: 0.1
init_run_step = 0
niter =  10
*** generate kfile 0
r0 = 4.55
b0 = 11.0
ip = 9999999.995
ip, ip cal, ip/(ip cal) = 10.000 10.003 1.000
weigting upper xpoint: [2, 3, 4, 5]
weigting lower xpoint: [9, 10, 11, 12]
run efit
efit, subprocess
elapsed time =  0.331  1.148
error_efit = 8.634e-05
*** generate kfile 1
apply underrelaxation
r0 = 4.55
b0 = 11.0
ip = 9999999.995
inmtric under-relax: 0.5
ip, ip cal, ip/(ip cal) = 10.000 9.991 1.001
weigting upper xpoint: [2, 3, 4, 5]
weigting lower xpoint: [9, 10, 11, 12]
diff_p = 0.00015029112878411544
diff_f = 0.0005423438004106681
converged
  ps_init_tag: Plasma State v2.055 f90 module initialization.
  %ps_update_fromxplasma: allocating nr,nz  =          129 ,         129
  %ps_update_fromxplasma: allocating nlim   =            5
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_nclass: allocating 16 Pfirsch-Schlutter moments profiles.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_update_fromxplasma: allocating nr,nz  =          129 ,         129
  %ps_update_fromxplasma: allocating nlim   =            5
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_nclass: allocating 16 Pfirsch-Schlutter moments profiles.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_update_fromxplasma: allocating nr,nz  =          129 ,         129
  %ps_update_fromxplasma: allocating nlim   =            5
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_nclass: allocating 16 Pfirsch-Schlutter moments profiles.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_update_fromxplasma: allocating nr,nz  =          129 ,         129
  %ps_update_fromxplasma: allocating nlim   =            5
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_nclass: allocating 16 Pfirsch-Schlutter moments profiles.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_update_fromxplasma: allocating nr,nz  =          129 ,         129
  %ps_update_fromxplasma: allocating nlim   =            5
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_nclass: allocating 16 Pfirsch-Schlutter moments profiles.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_update_fromxplasma: allocating nr,nz  =          129 ,         129
  %ps_update_fromxplasma: allocating nlim   =            5
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
Icurt=9.980e+00MA
EQ step finished
TR step
fastran.step() entered
update_next = disabled
update_instate =  True
[1, 1, 36]
['D', 'T', 'Kr']
ion D
ion T
imp Kr
model_beam = 0
dump_vol_profile : rho_nbi pbe 0.0
dump_vol_profile : rho_nbi pbi 0.0
dump_vol_profile : rho_nbi pbth 0.0
dump_vol_profile : rho_nbi pbth 0.0
dump_vol_profile : rho_fus pfuse 45030469.966176875
dump_vol_profile : rho_fus pfusi 13834476.542402858
dump_vol_profile : rho_fus pfusth 0.0
dump_vol_profile : rho_ecrf peech 0.0
dump_vol_profile : rho_icrf picrf_totals 6283848.053951434
dump_vol_profile : rho_lhrf pelh 0.0
S_name =  ['e                               ' 'D                               '
 'T                               ' 'Kr                              ']
0 e                               
1 D                               
processing 1 D                               
dump_vol_profile : rho_icrf picrf_totals 413.39657213356435
2 T                               
processing 2 T                               
dump_vol_profile : rho_icrf picrf_totals 13715738.54947625
3 Kr                              
processing 3 Kr                              
dump_vol_profile : rho_icrf picrf_totals 0.0
dump_vol_profile : rho_lhrf pilh 0.0
dump_vol_profile : rho_nbi tqbe 0.0
dump_vol_profile : rho_nbi tqbi 0.0
dump_vol_profile : rho_nbi tqbjxb 0.0
dump_vol_profile : rho_nbi tqbth 0.0
dump_vol_profile : rho_nbi sbedep 0.0
dump_vol_profile : rho_nbi sbehalo 0.0
dump_vol_profile : rho sn_trans 0.0
dump_vol_profile : rho_rad prad 0.0
dump_vol_profile : rho pohme 0.0
/global/common/software/atom/perlmutter/binaries/fastran/default/xfastran_ver1.00_ser
ncpu =  1
n1d  =  1
nky  =  1
[1, 1, 36]
['D', 'T', 'Kr']
ion D
ion T
imp Kr
nspec_th = 3
Icurt=1.000e+01MA
Icurr_bootstrap=1.814e+00MA
Icurr_ohmic=0.000e+00MA
rho_fus pfuse 100 100
integrated :  44720518.496298015
rho_fus pfusi 100 100
integrated :  13637549.308772586
model_beam = 0
density_model = 1: impurity = f*ne
TR step finished

========================================================================
= fastran driver: iteration number =  2

IC step
toric.step() called
cur_state_file =  s000001.00001
('Total IC power = ', 20000000.0)
power =  20000000.0
 using s000001.00001 as default state.
  ps_init_tag: Plasma State v2.055 f90 module initialization.
 Prepare toric input reading machine.inp
 ps%ns(1,0)   2.7622773930000001E+020
 <n_e(m-3)-PS> =   1.9366207404434358E+020
 <n_e(m-3)-Interpolated> =   1.9456494302578701E+020
 Thermal ion name, A, Z, dens, temp = 
 D           2           1   1.2790449175937065E+020   18.827399480210779     
 Thermal ion name, A, Z, dens, temp = 
 T           3           1   1.2790449175937065E+020   18.827399480210779     
 Thermal ion name, A, Z, dens, temp = 
 Kr          83          36   5.6718766059051981E+017   18.827399480210779     
 Fast ion name, A, Z = D_beam           2           1
 Fast ion name, A, Z = He4_fusn           4           2
('prepare_eqdsk', '/global/common/software/atom/perlmutter/binaries/geqxpl/default/geqxpl', 'g000001.00001')
Note: The following floating-point exceptions are signalling: IEEE_UNDERFLOW_FLAG IEEE_DENORMAL
  
  G-EQdsk data accepted, maximum rel. GS error:    4.6586853920652600E-002
  
  Bphi is counter-clockwise viewed from above (nsnccwb = 1)
  
  Jphi is counter-clockwise viewed from above (nsnccwi = 1)
  
 equigs_write completion code (0=normal):           0
('toric processors = ', '24')
  -- get (restore) plasma state from file -- 
 process_toric_output: cur_state_file = s000001.00001
  ps_init_tag: Plasma State v2.055 f90 module initialization.
 freq_ic, picrf  alloc? T T
 RF alloc? T         600
    number of icrf sources =            1
    number of species =            5           3
 process toric output: profile and spec sizes:
 toric mesh, PS mesh         459         101
 toric species, PS species counts           5           3
 powers in percent
 total:   100.00000000000000     
 electron total   26.132006244408164        5.7638727888592358     
 ion totals fundamental   2.3524546754141217E-003   0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000     
 ion totals harmonic   0.0000000000000000        68.101768512057191        0.0000000000000000        0.0000000000000000        0.0000000000000000     
    number of thermal species (ps%nspec_th) =            3
    number of icrf sources (ps%nicrf_src) =            1
 ps%freq_ic =    0.0000000000000000     
 ps%icrf_src_name = IC00                            
 ps%power_ic =    20000000.000000000     
 ICRF Power   20000000.000000000     
   --storing toric data in current plasma state
 Total FW Driven Current (A)   86788.817640133828     
 Total ICRF Power (W)   20000000.000000000     
 FWCD Effciency (A/W)   4.3394408820066916E-003
 Total FW Driven Current from each source-> Interpolated (A)   86788.817640133784     
 Total FW Driven Current from all sources -> Interpolated (A)   86788.817640133784     
  *ps_update_file_write: normal exit,            5  update elements written.
 Stored Partial RF Plasma State
 electron power, integral
   6379458.9444004539      Watts
 FW ion power, integral
   13620541.055599192      Watts
('merged TORIC plasma state data ', '/pscratch/sd/h/hswils/github_repos/MANTA_DBSCANS/paux_scan/SCAN/simulation_300831_0000/work/rf_ic_toric_8/RF_IC_s000001.00001')
IC step finished
EQ step
>>> efit.step() started
INPUT: PRESSURE found kinetic , mapped value =  kinetic
INPUT: RELAX_PROFILE not found, use default value: 0
INPUT: RELAX_METRIC not found, use default value: 0.5
INPUT: BETAN_TARGET not found, use default value: -1.0
model_pressure = kinetic
betan = 1.343593486810283
INPUT: TOPOLOGY found DN , mapped value =  DN
INPUT: ERROR not found, use default value: 1.0e-4
INPUT: MAX_EFIT_ERROR not found, use default value: 0.1
init_run_step = 0
niter =  10
*** generate kfile 0
r0 = 4.55
b0 = 11.0
ip = 9999999.995
ip, ip cal, ip/(ip cal) = 10.000 10.003 1.000
weigting upper xpoint: [2, 3, 4, 5]
weigting lower xpoint: [9, 10, 11, 12]
run efit
efit, subprocess
elapsed time =  0.338  1.352
error_efit = 7.487e-05
*** generate kfile 1
apply underrelaxation
r0 = 4.55
b0 = 11.0
ip = 9999999.995
inmtric under-relax: 0.5
ip, ip cal, ip/(ip cal) = 10.000 9.992 1.001
weigting upper xpoint: [2, 3, 4, 5]
weigting lower xpoint: [9, 10, 11, 12]
diff_p = 0.00012070365861904472
diff_f = 0.0007397209366561126
converged
Icurt=9.982e+00MA
EQ step finished
TR step
fastran.step() entered
update_next = disabled
update_instate =  True
[1, 1, 36]
['D', 'T', 'Kr']
ion D
ion T
imp Kr
model_beam = 0
dump_vol_profile : rho_nbi pbe 0.0
dump_vol_profile : rho_nbi pbi 0.0
dump_vol_profile : rho_nbi pbth 0.0
dump_vol_profile : rho_nbi pbth 0.0
dump_vol_profile : rho_fus pfuse 44720518.496298015
dump_vol_profile : rho_fus pfusi 13637549.308772586
dump_vol_profile : rho_fus pfusth 0.0
dump_vol_profile : rho_ecrf peech 0.0
dump_vol_profile : rho_icrf picrf_totals 6379458.944400454
dump_vol_profile : rho_lhrf pelh 0.0
S_name =  ['e                               ' 'D                               '
 'T                               ' 'Kr                              ']
0 e                               
1 D                               
processing 1 D                               
dump_vol_profile : rho_icrf picrf_totals 566.86890713962
2 T                               
processing 2 T                               
dump_vol_profile : rho_icrf picrf_totals 13619974.186692053
3 Kr                              
processing 3 Kr                              
dump_vol_profile : rho_icrf picrf_totals 0.0
dump_vol_profile : rho_lhrf pilh 0.0
dump_vol_profile : rho_nbi tqbe 0.0
dump_vol_profile : rho_nbi tqbi 0.0
dump_vol_profile : rho_nbi tqbjxb 0.0
dump_vol_profile : rho_nbi tqbth 0.0
dump_vol_profile : rho_nbi sbedep 0.0
dump_vol_profile : rho_nbi sbehalo 0.0
dump_vol_profile : rho sn_trans 0.0
dump_vol_profile : rho_rad prad 0.0
dump_vol_profile : rho pohme 0.0
/global/common/software/atom/perlmutter/binaries/fastran/default/xfastran_ver1.00_ser
ncpu =  1
n1d  =  1
nky  =  1
[1, 1, 36]
['D', 'T', 'Kr']
ion D
ion T
imp Kr
nspec_th = 3
Icurt=1.000e+01MA
Icurr_bootstrap=1.782e+00MA
Icurr_ohmic=0.000e+00MA
rho_fus pfuse 100 100
integrated :  43579439.21226857
rho_fus pfusi 100 100
integrated :  13072849.259448482
model_beam = 0
density_model = 1: impurity = f*ne
TR step finished

========================================================================
= fastran driver: iteration number =  3

IC step
toric.step() called
cur_state_file =  s000001.00001
('Total IC power = ', 20000000.0)
power =  20000000.0
 using s000001.00001 as default state.
  ps_init_tag: Plasma State v2.055 f90 module initialization.
 Prepare toric input reading machine.inp
 ps%ns(1,0)   2.7622773930000001E+020
 <n_e(m-3)-PS> =   1.9363705295971575E+020
 <n_e(m-3)-Interpolated> =   1.9454657898781508E+020
 Thermal ion name, A, Z, dens, temp = 
 D           2           1   1.2722635102961725E+020   18.658171970984611     
 Thermal ion name, A, Z, dens, temp = 
 T           3           1   1.2722635102961725E+020   18.658171970984611     
 Thermal ion name, A, Z, dens, temp = 
 Kr          83          36   6.0486214557682010E+017   18.658171970984611     
 Fast ion name, A, Z = D_beam           2           1
 Fast ion name, A, Z = He4_fusn           4           2
('prepare_eqdsk', '/global/common/software/atom/perlmutter/binaries/geqxpl/default/geqxpl', 'g000001.00001')
Note: The following floating-point exceptions are signalling: IEEE_UNDERFLOW_FLAG IEEE_DENORMAL
  
  G-EQdsk data accepted, maximum rel. GS error:    5.0332865013693731E-002
  
  Bphi is counter-clockwise viewed from above (nsnccwb = 1)
  
  Jphi is counter-clockwise viewed from above (nsnccwi = 1)
  
 equigs_write completion code (0=normal):           0
('toric processors = ', '24')
  -- get (restore) plasma state from file -- 
 process_toric_output: cur_state_file = s000001.00001
  ps_init_tag: Plasma State v2.055 f90 module initialization.
 freq_ic, picrf  alloc? T T
 RF alloc? T         600
    number of icrf sources =            1
    number of species =            5           3
 process toric output: profile and spec sizes:
 toric mesh, PS mesh         459         101
 toric species, PS species counts           5           3
 powers in percent
 total:   99.999999999999986     
 electron total   26.647948065752800        5.8068875626800152     
 ion totals fundamental   3.2208836750031609E-003   0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000     
 ion totals harmonic   0.0000000000000000        67.541943487892169        0.0000000000000000        0.0000000000000000        0.0000000000000000     
    number of thermal species (ps%nspec_th) =            3
    number of icrf sources (ps%nicrf_src) =            1
 ps%freq_ic =    0.0000000000000000     
 ps%icrf_src_name = IC00                            
 ps%power_ic =    20000000.000000000     
 ICRF Power   20000000.000000000     
   --storing toric data in current plasma state
 Total FW Driven Current (A)   84812.114176854855     
 Total ICRF Power (W)   20000000.000000000     
 FWCD Effciency (A/W)   4.2406057088427429E-003
 Total FW Driven Current from each source-> Interpolated (A)   84812.114176854870     
 Total FW Driven Current from all sources -> Interpolated (A)   84812.114176854870     
  *ps_update_file_write: normal exit,            5  update elements written.
 Stored Partial RF Plasma State
 electron power, integral
   6491313.0402622493      Watts
 FW ion power, integral
   13508686.959737392      Watts
('merged TORIC plasma state data ', '/pscratch/sd/h/hswils/github_repos/MANTA_DBSCANS/paux_scan/SCAN/simulation_300831_0000/work/rf_ic_toric_8/RF_IC_s000001.00001')
IC step finished
EQ step
>>> efit.step() started
INPUT: PRESSURE found kinetic , mapped value =  kinetic
INPUT: RELAX_PROFILE not found, use default value: 0
INPUT: RELAX_METRIC not found, use default value: 0.5
INPUT: BETAN_TARGET not found, use default value: -1.0
model_pressure = kinetic
betan = 1.3052896394934137
INPUT: TOPOLOGY found DN , mapped value =  DN
INPUT: ERROR not found, use default value: 1.0e-4
INPUT: MAX_EFIT_ERROR not found, use default value: 0.1
init_run_step = 0
niter =  10
*** generate kfile 0
r0 = 4.55
b0 = 11.0
ip = 9999999.995
ip, ip cal, ip/(ip cal) = 10.000 10.003 1.000
weigting upper xpoint: [2, 3, 4, 5]
weigting lower xpoint: [9, 10, 11, 12]
run efit
efit, subprocess
elapsed time =  0.334  1.173
error_efit = 9.561e-05
*** generate kfile 1
apply underrelaxation
r0 = 4.55
b0 = 11.0
ip = 9999999.995
inmtric under-relax: 0.5
ip, ip cal, ip/(ip cal) = 10.000 9.995 1.000
weigting upper xpoint: [2, 3, 4, 5]
weigting lower xpoint: [9, 10, 11, 12]
diff_p = 7.219965577114879e-05
diff_f = 0.00044192449766449474
converged
  %ps_mhdeq_nclass: allocating 16 Pfirsch-Schlutter moments profiles.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_update_fromxplasma: allocating nr,nz  =          129 ,         129
  %ps_update_fromxplasma: allocating nlim   =            5
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_nclass: allocating 16 Pfirsch-Schlutter moments profiles.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_update_fromxplasma: allocating nr,nz  =          129 ,         129
  %ps_update_fromxplasma: allocating nlim   =            5
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_nclass: allocating 16 Pfirsch-Schlutter moments profiles.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_update_fromxplasma: allocating nr,nz  =          129 ,         129
  %ps_update_fromxplasma: allocating nlim   =            5
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_nclass: allocating 16 Pfirsch-Schlutter moments profiles.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_update_fromxplasma: allocating nr,nz  =          129 ,         129
  %ps_update_fromxplasma: allocating nlim   =            5
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_nclass: allocating 16 Pfirsch-Schlutter moments profiles.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_update_fromxplasma: allocating nr,nz  =          129 ,         129
  %ps_update_fromxplasma: allocating nlim   =            5
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_nclass: allocating 16 Pfirsch-Schlutter moments profiles.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_update_fromxplasma: allocating nr,nz  =          129 ,         129
  %ps_update_fromxplasma: allocating nlim   =            5
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
Icurt=9.988e+00MA
EQ step finished
TR step
fastran.step() entered
update_next = disabled
update_instate =  True
[1, 1, 36]
['D', 'T', 'Kr']
ion D
ion T
imp Kr
model_beam = 0
dump_vol_profile : rho_nbi pbe 0.0
dump_vol_profile : rho_nbi pbi 0.0
dump_vol_profile : rho_nbi pbth 0.0
dump_vol_profile : rho_nbi pbth 0.0
dump_vol_profile : rho_fus pfuse 43579439.21226857
dump_vol_profile : rho_fus pfusi 13072849.259448482
dump_vol_profile : rho_fus pfusth 0.0
dump_vol_profile : rho_ecrf peech 0.0
dump_vol_profile : rho_icrf picrf_totals 6491313.040262249
dump_vol_profile : rho_lhrf pelh 0.0
S_name =  ['e                               ' 'D                               '
 'T                               ' 'Kr                              ']
0 e                               
1 D                               
processing 1 D                               
dump_vol_profile : rho_icrf picrf_totals 763.7079062180696
2 T                               
processing 2 T                               
dump_vol_profile : rho_icrf picrf_totals 13507923.251831165
3 Kr                              
processing 3 Kr                              
dump_vol_profile : rho_icrf picrf_totals 0.0
dump_vol_profile : rho_lhrf pilh 0.0
dump_vol_profile : rho_nbi tqbe 0.0
dump_vol_profile : rho_nbi tqbi 0.0
dump_vol_profile : rho_nbi tqbjxb 0.0
dump_vol_profile : rho_nbi tqbth 0.0
dump_vol_profile : rho_nbi sbedep 0.0
dump_vol_profile : rho_nbi sbehalo 0.0
dump_vol_profile : rho sn_trans 0.0
dump_vol_profile : rho_rad prad 0.0
dump_vol_profile : rho pohme 0.0
/global/common/software/atom/perlmutter/binaries/fastran/default/xfastran_ver1.00_ser
ncpu =  1
n1d  =  1
nky  =  1
[1, 1, 36]
['D', 'T', 'Kr']
ion D
ion T
imp Kr
nspec_th = 3
Icurt=1.000e+01MA
Icurr_bootstrap=1.753e+00MA
Icurr_ohmic=0.000e+00MA
rho_fus pfuse 100 100
integrated :  42284479.95928447
rho_fus pfusi 100 100
integrated :  12462244.649954341
model_beam = 0
density_model = 1: impurity = f*ne
TR step finished

========================================================================
= fastran driver: iteration number =  4

IC step
toric.step() called
cur_state_file =  s000001.00001
('Total IC power = ', 20000000.0)
power =  20000000.0
 using s000001.00001 as default state.
  ps_init_tag: Plasma State v2.055 f90 module initialization.
 Prepare toric input reading machine.inp
 ps%ns(1,0)   2.7622773930000001E+020
 <n_e(m-3)-PS> =   1.9361370857086058E+020
 <n_e(m-3)-Interpolated> =   1.9452965759323318E+020
 Thermal ion name, A, Z, dens, temp = 
 D           2           1   1.2657423126910876E+020   18.455958337473803     
 Thermal ion name, A, Z, dens, temp = 
 T           3           1   1.2657423126910876E+020   18.455958337473803     
 Thermal ion name, A, Z, dens, temp = 
 Kr          83          36   6.4109102116062490E+017   18.455958337473803     
 Fast ion name, A, Z = D_beam           2           1
 Fast ion name, A, Z = He4_fusn           4           2
('prepare_eqdsk', '/global/common/software/atom/perlmutter/binaries/geqxpl/default/geqxpl', 'g000001.00001')
Note: The following floating-point exceptions are signalling: IEEE_UNDERFLOW_FLAG IEEE_DENORMAL
  
  G-EQdsk data accepted, maximum rel. GS error:    5.1320212212816622E-002
  
  Bphi is counter-clockwise viewed from above (nsnccwb = 1)
  
  Jphi is counter-clockwise viewed from above (nsnccwi = 1)
  
 equigs_write completion code (0=normal):           0
('toric processors = ', '24')
  -- get (restore) plasma state from file -- 
 process_toric_output: cur_state_file = s000001.00001
  ps_init_tag: Plasma State v2.055 f90 module initialization.
 freq_ic, picrf  alloc? T T
 RF alloc? T         600
    number of icrf sources =            1
    number of species =            5           3
 process toric output: profile and spec sizes:
 toric mesh, PS mesh         459         101
 toric species, PS species counts           5           3
 powers in percent
 total:   100.00000000000000     
 electron total   26.942612510376296        5.8823076329417106     
 ion totals fundamental   3.8109080809252292E-003   0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000     
 ion totals harmonic   0.0000000000000000        67.171268948601067        0.0000000000000000        0.0000000000000000        0.0000000000000000     
    number of thermal species (ps%nspec_th) =            3
    number of icrf sources (ps%nicrf_src) =            1
 ps%freq_ic =    0.0000000000000000     
 ps%icrf_src_name = IC00                            
 ps%power_ic =    20000000.000000000     
 ICRF Power   20000000.000000000     
   --storing toric data in current plasma state
 Total FW Driven Current (A)   82253.860077331759     
 Total ICRF Power (W)   20000000.000000000     
 FWCD Effciency (A/W)   4.1126930038665882E-003
 Total FW Driven Current from each source-> Interpolated (A)   82253.860077331745     
 Total FW Driven Current from all sources -> Interpolated (A)   82253.860077331745     
  *ps_update_file_write: normal exit,            5  update elements written.
 Stored Partial RF Plasma State
 electron power, integral
   6565204.4433531724      Watts
 FW ion power, integral
   13434795.556646556      Watts
('merged TORIC plasma state data ', '/pscratch/sd/h/hswils/github_repos/MANTA_DBSCANS/paux_scan/SCAN/simulation_300831_0000/work/rf_ic_toric_8/RF_IC_s000001.00001')
IC step finished
EQ step
>>> efit.step() started
INPUT: PRESSURE found kinetic , mapped value =  kinetic
INPUT: RELAX_PROFILE not found, use default value: 0
INPUT: RELAX_METRIC not found, use default value: 0.5
INPUT: BETAN_TARGET not found, use default value: -1.0
model_pressure = kinetic
betan = 1.2724924876595485
INPUT: TOPOLOGY found DN , mapped value =  DN
INPUT: ERROR not found, use default value: 1.0e-4
INPUT: MAX_EFIT_ERROR not found, use default value: 0.1
init_run_step = 0
niter =  10
*** generate kfile 0
r0 = 4.55
b0 = 11.0
ip = 9999999.995
ip, ip cal, ip/(ip cal) = 10.000 10.003 1.000
weigting upper xpoint: [2, 3, 4, 5]
weigting lower xpoint: [9, 10, 11, 12]
run efit
efit, subprocess
elapsed time =  0.331  1.326
error_efit = 9.43e-05
*** generate kfile 1
apply underrelaxation
r0 = 4.55
b0 = 11.0
ip = 9999999.995
inmtric under-relax: 0.5
ip, ip cal, ip/(ip cal) = 10.000 9.997 1.000
weigting upper xpoint: [2, 3, 4, 5]
weigting lower xpoint: [9, 10, 11, 12]
diff_p = 9.284706593976984e-05
diff_f = 0.0002798859592993267
converged
Icurt=9.991e+00MA
EQ step finished
TR step
fastran.step() entered
update_next = disabled
update_instate =  True
[1, 1, 36]
['D', 'T', 'Kr']
ion D
ion T
imp Kr
model_beam = 0
dump_vol_profile : rho_nbi pbe 0.0
dump_vol_profile : rho_nbi pbi 0.0
dump_vol_profile : rho_nbi pbth 0.0
dump_vol_profile : rho_nbi pbth 0.0
dump_vol_profile : rho_fus pfuse 42284479.95928447
dump_vol_profile : rho_fus pfusi 12462244.649954341
dump_vol_profile : rho_fus pfusth 0.0
dump_vol_profile : rho_ecrf peech 0.0
dump_vol_profile : rho_icrf picrf_totals 6565204.443353172
dump_vol_profile : rho_lhrf pelh 0.0
S_name =  ['e                               ' 'D                               '
 'T                               ' 'Kr                              ']
0 e                               
1 D                               
processing 1 D                               
dump_vol_profile : rho_icrf picrf_totals 906.9263557113383
2 T                               
processing 2 T                               
dump_vol_profile : rho_icrf picrf_totals 13433888.630290847
3 Kr                              
processing 3 Kr                              
dump_vol_profile : rho_icrf picrf_totals 0.0
dump_vol_profile : rho_lhrf pilh 0.0
dump_vol_profile : rho_nbi tqbe 0.0
dump_vol_profile : rho_nbi tqbi 0.0
dump_vol_profile : rho_nbi tqbjxb 0.0
dump_vol_profile : rho_nbi tqbth 0.0
dump_vol_profile : rho_nbi sbedep 0.0
dump_vol_profile : rho_nbi sbehalo 0.0
dump_vol_profile : rho sn_trans 0.0
dump_vol_profile : rho_rad prad 0.0
dump_vol_profile : rho pohme 0.0
/global/common/software/atom/perlmutter/binaries/fastran/default/xfastran_ver1.00_ser
ncpu =  1
n1d  =  1
nky  =  1
[1, 1, 36]
['D', 'T', 'Kr']
ion D
ion T
imp Kr
nspec_th = 3
Icurt=1.000e+01MA
Icurr_bootstrap=1.742e+00MA
Icurr_ohmic=0.000e+00MA
rho_fus pfuse 100 100
integrated :  41746220.24954661
rho_fus pfusi 100 100
integrated :  12219177.345802054
model_beam = 0
density_model = 1: impurity = f*ne
TR step finished

========================================================================
= fastran driver: iteration number =  5

IC step
toric.step() called
cur_state_file =  s000001.00001
('Total IC power = ', 20000000.0)
power =  20000000.0
 using s000001.00001 as default state.
  ps_init_tag: Plasma State v2.055 f90 module initialization.
 Prepare toric input reading machine.inp
 ps%ns(1,0)   2.7622773930000001E+020
 <n_e(m-3)-PS> =   1.9359199948672375E+020
 <n_e(m-3)-Interpolated> =   1.9451430343589714E+020
 Thermal ion name, A, Z, dens, temp = 
 D           2           1   1.2592934725956947E+020   18.306935923104465     
 Thermal ion name, A, Z, dens, temp = 
 T           3           1   1.2592934725956947E+020   18.306935923104465     
 Thermal ion name, A, Z, dens, temp = 
 Kr          83          36   6.7691791057947494E+017   18.306935923104465     
 Fast ion name, A, Z = D_beam           2           1
 Fast ion name, A, Z = He4_fusn           4           2
('prepare_eqdsk', '/global/common/software/atom/perlmutter/binaries/geqxpl/default/geqxpl', 'g000001.00001')
Note: The following floating-point exceptions are signalling: IEEE_UNDERFLOW_FLAG IEEE_DENORMAL
  
  G-EQdsk data accepted, maximum rel. GS error:    5.2230700493065704E-002
  
  Bphi is counter-clockwise viewed from above (nsnccwb = 1)
  
  Jphi is counter-clockwise viewed from above (nsnccwi = 1)
  
 equigs_write completion code (0=normal):           0
('toric processors = ', '24')
  -- get (restore) plasma state from file -- 
 process_toric_output: cur_state_file = s000001.00001
  ps_init_tag: Plasma State v2.055 f90 module initialization.
 freq_ic, picrf  alloc? T T
 RF alloc? T         600
    number of icrf sources =            1
    number of species =            5           3
 process toric output: profile and spec sizes:
 toric mesh, PS mesh         459         101
 toric species, PS species counts           5           3
 powers in percent
 total:   100.00000000000001     
 electron total   27.162139495964492        5.8581039055717001     
 ion totals fundamental   4.1506222557117015E-003   0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000     
 ion totals harmonic   0.0000000000000000        66.975605976208115        0.0000000000000000        0.0000000000000000        0.0000000000000000     
    number of thermal species (ps%nspec_th) =            3
    number of icrf sources (ps%nicrf_src) =            1
 ps%freq_ic =    0.0000000000000000     
 ps%icrf_src_name = IC00                            
 ps%power_ic =    20000000.000000000     
 ICRF Power   20000000.000000000     
   --storing toric data in current plasma state
 Total FW Driven Current (A)   79807.380895216571     
 Total ICRF Power (W)   20000000.000000000     
 FWCD Effciency (A/W)   3.9903690447608284E-003
 Total FW Driven Current from each source-> Interpolated (A)   79807.380895216585     
 Total FW Driven Current from all sources -> Interpolated (A)   79807.380895216585     
  *ps_update_file_write: normal exit,            5  update elements written.
 Stored Partial RF Plasma State
 electron power, integral
   6604174.1217738530      Watts
 FW ion power, integral
   13395825.878225792      Watts
('merged TORIC plasma state data ', '/pscratch/sd/h/hswils/github_repos/MANTA_DBSCANS/paux_scan/SCAN/simulation_300831_0000/work/rf_ic_toric_8/RF_IC_s000001.00001')
IC step finished
EQ step
>>> efit.step() started
INPUT: PRESSURE found kinetic , mapped value =  kinetic
INPUT: RELAX_PROFILE not found, use default value: 0
INPUT: RELAX_METRIC not found, use default value: 0.5
INPUT: BETAN_TARGET not found, use default value: -1.0
model_pressure = kinetic
betan = 1.2462526861585275
INPUT: TOPOLOGY found DN , mapped value =  DN
INPUT: ERROR not found, use default value: 1.0e-4
INPUT: MAX_EFIT_ERROR not found, use default value: 0.1
init_run_step = 0
niter =  10
*** generate kfile 0
r0 = 4.55
b0 = 11.0
ip = 9999999.995
ip, ip cal, ip/(ip cal) = 10.000 10.003 1.000
weigting upper xpoint: [2, 3, 4, 5]
weigting lower xpoint: [9, 10, 11, 12]
run efit
efit, subprocess
elapsed time =  0.331  1.159
error_efit = 9.761e-05
*** generate kfile 1
apply underrelaxation
r0 = 4.55
b0 = 11.0
ip = 9999999.995
inmtric under-relax: 0.5
ip, ip cal, ip/(ip cal) = 10.000 9.997 1.000
weigting upper xpoint: [2, 3, 4, 5]
weigting lower xpoint: [9, 10, 11, 12]
diff_p = 7.662671886381111e-05
diff_f = 0.0002769402417045866
converged
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_nclass: allocating 16 Pfirsch-Schlutter moments profiles.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_update_fromxplasma: allocating nr,nz  =          129 ,         129
  %ps_update_fromxplasma: allocating nlim   =            5
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_nclass: allocating 16 Pfirsch-Schlutter moments profiles.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_update_fromxplasma: allocating nr,nz  =          129 ,         129
  %ps_update_fromxplasma: allocating nlim   =            5
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_nclass: allocating 16 Pfirsch-Schlutter moments profiles.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_update_fromxplasma: allocating nr,nz  =          129 ,         129
  %ps_update_fromxplasma: allocating nlim   =            5
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_nclass: allocating 16 Pfirsch-Schlutter moments profiles.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_update_fromxplasma: allocating nr,nz  =          129 ,         129
  %ps_update_fromxplasma: allocating nlim   =            5
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_nclass: allocating 16 Pfirsch-Schlutter moments profiles.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_update_fromxplasma: allocating nr,nz  =          129 ,         129
  %ps_update_fromxplasma: allocating nlim   =            5
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_nclass: allocating 16 Pfirsch-Schlutter moments profiles.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_update_fromxplasma: allocating nr,nz  =          129 ,         129
  %ps_update_fromxplasma: allocating nlim   =            5
Icurt=9.992e+00MA
EQ step finished
TR step
fastran.step() entered
update_next = disabled
update_instate =  True
[1, 1, 36]
['D', 'T', 'Kr']
ion D
ion T
imp Kr
model_beam = 0
dump_vol_profile : rho_nbi pbe 0.0
dump_vol_profile : rho_nbi pbi 0.0
dump_vol_profile : rho_nbi pbth 0.0
dump_vol_profile : rho_nbi pbth 0.0
dump_vol_profile : rho_fus pfuse 41746220.24954661
dump_vol_profile : rho_fus pfusi 12219177.345802054
dump_vol_profile : rho_fus pfusth 0.0
dump_vol_profile : rho_ecrf peech 0.0
dump_vol_profile : rho_icrf picrf_totals 6604174.121773853
dump_vol_profile : rho_lhrf pelh 0.0
S_name =  ['e                               ' 'D                               '
 'T                               ' 'Kr                              ']
0 e                               
1 D                               
processing 1 D                               
dump_vol_profile : rho_icrf picrf_totals 1001.8324814720203
2 T                               
processing 2 T                               
dump_vol_profile : rho_icrf picrf_totals 13394824.045744319
3 Kr                              
processing 3 Kr                              
dump_vol_profile : rho_icrf picrf_totals 0.0
dump_vol_profile : rho_lhrf pilh 0.0
dump_vol_profile : rho_nbi tqbe 0.0
dump_vol_profile : rho_nbi tqbi 0.0
dump_vol_profile : rho_nbi tqbjxb 0.0
dump_vol_profile : rho_nbi tqbth 0.0
dump_vol_profile : rho_nbi sbedep 0.0
dump_vol_profile : rho_nbi sbehalo 0.0
dump_vol_profile : rho sn_trans 0.0
dump_vol_profile : rho_rad prad 0.0
dump_vol_profile : rho pohme 0.0
/global/common/software/atom/perlmutter/binaries/fastran/default/xfastran_ver1.00_ser
ncpu =  1
n1d  =  1
nky  =  1
[1, 1, 36]
['D', 'T', 'Kr']
ion D
ion T
imp Kr
nspec_th = 3
Icurt=1.000e+01MA
Icurr_bootstrap=1.728e+00MA
Icurr_ohmic=0.000e+00MA
rho_fus pfuse 100 100
integrated :  41091352.576121025
rho_fus pfusi 100 100
integrated :  11937179.8668354
model_beam = 0
density_model = 1: impurity = f*ne
TR step finished

========================================================================
= fastran driver: iteration number =  6

IC step
toric.step() called
cur_state_file =  s000001.00001
('Total IC power = ', 20000000.0)
power =  20000000.0
 using s000001.00001 as default state.
  ps_init_tag: Plasma State v2.055 f90 module initialization.
 Prepare toric input reading machine.inp
 ps%ns(1,0)   2.7622773930000001E+020
 <n_e(m-3)-PS> =   1.9357359580204604E+020
 <n_e(m-3)-Interpolated> =   1.9450217599565129E+020
 Thermal ion name, A, Z, dens, temp = 
 D           2           1   1.2529131774901841E+020   18.189854084805219     
 Thermal ion name, A, Z, dens, temp = 
 T           3           1   1.2529131774901841E+020   18.189854084805219     
 Thermal ion name, A, Z, dens, temp = 
 Kr          83          36   7.1236399449897805E+017   18.189854084805219     
 Fast ion name, A, Z = D_beam           2           1
 Fast ion name, A, Z = He4_fusn           4           2
('prepare_eqdsk', '/global/common/software/atom/perlmutter/binaries/geqxpl/default/geqxpl', 'g000001.00001')
Note: The following floating-point exceptions are signalling: IEEE_UNDERFLOW_FLAG IEEE_DENORMAL
  
  G-EQdsk data accepted, maximum rel. GS error:    5.3068255077563402E-002
  
  Bphi is counter-clockwise viewed from above (nsnccwb = 1)
  
  Jphi is counter-clockwise viewed from above (nsnccwi = 1)
  
 equigs_write completion code (0=normal):           0
('toric processors = ', '24')
  -- get (restore) plasma state from file -- 
 process_toric_output: cur_state_file = s000001.00001
  ps_init_tag: Plasma State v2.055 f90 module initialization.
 freq_ic, picrf  alloc? T T
 RF alloc? T         600
    number of icrf sources =            1
    number of species =            5           3
 process toric output: profile and spec sizes:
 toric mesh, PS mesh         459         101
 toric species, PS species counts           5           3
 powers in percent
 total:   100.00000000000001     
 electron total   27.220638352785713        5.8535458188447054     
 ion totals fundamental   4.5378374463959379E-003   0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000     
 ion totals harmonic   0.0000000000000000        66.921277990923201        0.0000000000000000        0.0000000000000000        0.0000000000000000     
    number of thermal species (ps%nspec_th) =            3
    number of icrf sources (ps%nicrf_src) =            1
 ps%freq_ic =    0.0000000000000000     
 ps%icrf_src_name = IC00                            
 ps%power_ic =    20000000.000000000     
 ICRF Power   20000000.000000000     
   --storing toric data in current plasma state
 Total FW Driven Current (A)   77336.966445141763     
 Total ICRF Power (W)   20000000.000000000     
 FWCD Effciency (A/W)   3.8668483222570882E-003
 Total FW Driven Current from each source-> Interpolated (A)   77336.966445141734     
 Total FW Driven Current from all sources -> Interpolated (A)   77336.966445141734     
  *ps_update_file_write: normal exit,            5  update elements written.
 Stored Partial RF Plasma State
 electron power, integral
   6614968.6684506368      Watts
 FW ion power, integral
   13385031.331548743      Watts
('merged TORIC plasma state data ', '/pscratch/sd/h/hswils/github_repos/MANTA_DBSCANS/paux_scan/SCAN/simulation_300831_0000/work/rf_ic_toric_8/RF_IC_s000001.00001')
IC step finished
EQ step
>>> efit.step() started
INPUT: PRESSURE found kinetic , mapped value =  kinetic
INPUT: RELAX_PROFILE not found, use default value: 0
INPUT: RELAX_METRIC not found, use default value: 0.5
INPUT: BETAN_TARGET not found, use default value: -1.0
model_pressure = kinetic
betan = 1.2245427062789844
INPUT: TOPOLOGY found DN , mapped value =  DN
INPUT: ERROR not found, use default value: 1.0e-4
INPUT: MAX_EFIT_ERROR not found, use default value: 0.1
init_run_step = 0
niter =  10
*** generate kfile 0
r0 = 4.55
b0 = 11.0
ip = 9999999.995
ip, ip cal, ip/(ip cal) = 10.000 10.003 1.000
weigting upper xpoint: [2, 3, 4, 5]
weigting lower xpoint: [9, 10, 11, 12]
run efit
efit, subprocess
elapsed time =  0.336  1.181
error_efit = 8.681e-05
*** generate kfile 1
apply underrelaxation
r0 = 4.55
b0 = 11.0
ip = 9999999.995
inmtric under-relax: 0.5
ip, ip cal, ip/(ip cal) = 10.000 9.999 1.000
weigting upper xpoint: [2, 3, 4, 5]
weigting lower xpoint: [9, 10, 11, 12]
diff_p = 8.502864925516214e-05
diff_f = 0.00018700933514957785
converged
Icurt=9.995e+00MA
EQ step finished
TR step
fastran.step() entered
update_next = disabled
update_instate =  True
[1, 1, 36]
['D', 'T', 'Kr']
ion D
ion T
imp Kr
model_beam = 0
dump_vol_profile : rho_nbi pbe 0.0
dump_vol_profile : rho_nbi pbi 0.0
dump_vol_profile : rho_nbi pbth 0.0
dump_vol_profile : rho_nbi pbth 0.0
dump_vol_profile : rho_fus pfuse 41091352.576121025
dump_vol_profile : rho_fus pfusi 11937179.8668354
dump_vol_profile : rho_fus pfusth 0.0
dump_vol_profile : rho_ecrf peech 0.0
dump_vol_profile : rho_icrf picrf_totals 6614968.668450637
dump_vol_profile : rho_lhrf pelh 0.0
S_name =  ['e                               ' 'D                               '
 'T                               ' 'Kr                              ']
0 e                               
1 D                               
processing 1 D                               
dump_vol_profile : rho_icrf picrf_totals 1112.064166764169
2 T                               
processing 2 T                               
dump_vol_profile : rho_icrf picrf_totals 13383919.267381988
3 Kr                              
processing 3 Kr                              
dump_vol_profile : rho_icrf picrf_totals 0.0
dump_vol_profile : rho_lhrf pilh 0.0
dump_vol_profile : rho_nbi tqbe 0.0
dump_vol_profile : rho_nbi tqbi 0.0
dump_vol_profile : rho_nbi tqbjxb 0.0
dump_vol_profile : rho_nbi tqbth 0.0
dump_vol_profile : rho_nbi sbedep 0.0
dump_vol_profile : rho_nbi sbehalo 0.0
dump_vol_profile : rho sn_trans 0.0
dump_vol_profile : rho_rad prad 0.0
dump_vol_profile : rho pohme 0.0
/global/common/software/atom/perlmutter/binaries/fastran/default/xfastran_ver1.00_ser
ncpu =  1
n1d  =  1
nky  =  1
[1, 1, 36]
['D', 'T', 'Kr']
ion D
ion T
imp Kr
nspec_th = 3
Icurt=1.000e+01MA
Icurr_bootstrap=1.711e+00MA
Icurr_ohmic=0.000e+00MA
rho_fus pfuse 100 100
integrated :  40257939.02422283
rho_fus pfusi 100 100
integrated :  11610148.82218641
model_beam = 0
density_model = 1: impurity = f*ne
TR step finished

========================================================================
= fastran driver: iteration number =  7

IC step
toric.step() called
cur_state_file =  s000001.00001
('Total IC power = ', 20000000.0)
power =  20000000.0
 using s000001.00001 as default state.
  ps_init_tag: Plasma State v2.055 f90 module initialization.
 Prepare toric input reading machine.inp
 ps%ns(1,0)   2.7622773930000001E+020
 <n_e(m-3)-PS> =   1.9355743798232485E+020
 <n_e(m-3)-Interpolated> =   1.9449218709176133E+020
 Thermal ion name, A, Z, dens, temp = 
 D           2           1   1.2466258750151700E+020   18.090052791512118     
 Thermal ion name, A, Z, dens, temp = 
 T           3           1   1.2466258750151700E+020   18.090052791512118     
 Thermal ion name, A, Z, dens, temp = 
 Kr          83          36   7.4729345269350029E+017   18.090052791512118     
 Fast ion name, A, Z = D_beam           2           1
 Fast ion name, A, Z = He4_fusn           4           2
('prepare_eqdsk', '/global/common/software/atom/perlmutter/binaries/geqxpl/default/geqxpl', 'g000001.00001')
Note: The following floating-point exceptions are signalling: IEEE_UNDERFLOW_FLAG IEEE_DENORMAL
  
  G-EQdsk data accepted, maximum rel. GS error:    5.4811597930580151E-002
  
  Bphi is counter-clockwise viewed from above (nsnccwb = 1)
  
  Jphi is counter-clockwise viewed from above (nsnccwi = 1)
  
 equigs_write completion code (0=normal):           0
('toric processors = ', '24')
  -- get (restore) plasma state from file -- 
 process_toric_output: cur_state_file = s000001.00001
  ps_init_tag: Plasma State v2.055 f90 module initialization.
 freq_ic, picrf  alloc? T T
 RF alloc? T         600
    number of icrf sources =            1
    number of species =            5           3
 process toric output: profile and spec sizes:
 toric mesh, PS mesh         459         101
 toric species, PS species counts           5           3
 powers in percent
 total:   100.00000000000001     
 electron total   27.136896459748765        5.7883413987406582     
 ion totals fundamental   5.0027643188004216E-003   0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000     
 ion totals harmonic   0.0000000000000000        67.069759377191787        0.0000000000000000        0.0000000000000000        0.0000000000000000     
    number of thermal species (ps%nspec_th) =            3
    number of icrf sources (ps%nicrf_src) =            1
 ps%freq_ic =    0.0000000000000000     
 ps%icrf_src_name = IC00                            
 ps%power_ic =    20000000.000000000     
 ICRF Power   20000000.000000000     
   --storing toric data in current plasma state
 Total FW Driven Current (A)   74396.432386779008     
 Total ICRF Power (W)   20000000.000000000     
 FWCD Effciency (A/W)   3.7198216193389502E-003
 Total FW Driven Current from each source-> Interpolated (A)   74396.432386778950     
 Total FW Driven Current from all sources -> Interpolated (A)   74396.432386778950     
  *ps_update_file_write: normal exit,            5  update elements written.
 Stored Partial RF Plasma State
 electron power, integral
   6585426.9658540394      Watts
 FW ion power, integral
   13414573.034145096      Watts
('merged TORIC plasma state data ', '/pscratch/sd/h/hswils/github_repos/MANTA_DBSCANS/paux_scan/SCAN/simulation_300831_0000/work/rf_ic_toric_8/RF_IC_s000001.00001')
IC step finished
EQ step
>>> efit.step() started
INPUT: PRESSURE found kinetic , mapped value =  kinetic
INPUT: RELAX_PROFILE not found, use default value: 0
INPUT: RELAX_METRIC not found, use default value: 0.5
INPUT: BETAN_TARGET not found, use default value: -1.0
model_pressure = kinetic
betan = 1.2058921083780223
INPUT: TOPOLOGY found DN , mapped value =  DN
INPUT: ERROR not found, use default value: 1.0e-4
INPUT: MAX_EFIT_ERROR not found, use default value: 0.1
init_run_step = 0
niter =  10
*** generate kfile 0
r0 = 4.55
b0 = 11.0
ip = 9999999.995
ip, ip cal, ip/(ip cal) = 10.000 10.003 1.000
weigting upper xpoint: [2, 3, 4, 5]
weigting lower xpoint: [9, 10, 11, 12]
run efit
efit, subprocess
elapsed time =  0.335  1.145
error_efit = 9.338e-05
*** generate kfile 1
apply underrelaxation
r0 = 4.55
b0 = 11.0
ip = 9999999.995
inmtric under-relax: 0.5
ip, ip cal, ip/(ip cal) = 10.000 9.999 1.000
weigting upper xpoint: [2, 3, 4, 5]
weigting lower xpoint: [9, 10, 11, 12]
diff_p = 0.00010592340759092448
diff_f = 0.00011747121156893511
converged
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_nclass: allocating 16 Pfirsch-Schlutter moments profiles.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_update_fromxplasma: allocating nr,nz  =          129 ,         129
  %ps_update_fromxplasma: allocating nlim   =            5
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_nclass: allocating 16 Pfirsch-Schlutter moments profiles.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_update_fromxplasma: allocating nr,nz  =          129 ,         129
  %ps_update_fromxplasma: allocating nlim   =            5
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_nclass: allocating 16 Pfirsch-Schlutter moments profiles.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_update_fromxplasma: allocating nr,nz  =          129 ,         129
  %ps_update_fromxplasma: allocating nlim   =            5
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_nclass: allocating 16 Pfirsch-Schlutter moments profiles.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_update_fromxplasma: allocating nr,nz  =          129 ,         129
  %ps_update_fromxplasma: allocating nlim   =            5
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_nclass: allocating 16 Pfirsch-Schlutter moments profiles.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_update_fromxplasma: allocating nr,nz  =          129 ,         129
  %ps_update_fromxplasma: allocating nlim   =            5
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_nclass: allocating 16 Pfirsch-Schlutter moments profiles.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
  %ps_mhdeq_derive: compute <1/R^2> and <|grad(rho)|^2/R^2>.
  %ps_mhdeq_derive: compute metric averages <1/R>, <|grad(rho)|>, etc.
  %ps_mhdeq_derive: compute R & Z minmax profiles; triangularity, etc.
  %ps_mhdeq_derive: compute <1/B^2>, NCLASS moments, etc.
  %ps_mhdeq_derive: compute NC sqrt-singular flux surface averages.
  %ps_mhdeq_derive: compute profiles of Bmin, Bmax.
Icurt=9.996e+00MA
EQ step finished
TR step
fastran.step() entered
update_next = disabled
update_instate =  True
[1, 1, 36]
['D', 'T', 'Kr']
ion D
ion T
imp Kr
model_beam = 0
dump_vol_profile : rho_nbi pbe 0.0
dump_vol_profile : rho_nbi pbi 0.0
dump_vol_profile : rho_nbi pbth 0.0
dump_vol_profile : rho_nbi pbth 0.0
dump_vol_profile : rho_fus pfuse 40257939.02422283
dump_vol_profile : rho_fus pfusi 11610148.82218641
dump_vol_profile : rho_fus pfusth 0.0
dump_vol_profile : rho_ecrf peech 0.0
dump_vol_profile : rho_icrf picrf_totals 6585426.965854039
dump_vol_profile : rho_lhrf pelh 0.0
S_name =  ['e                               ' 'D                               '
 'T                               ' 'Kr                              ']
0 e                               
1 D                               
processing 1 D                               
dump_vol_profile : rho_icrf picrf_totals 1234.8761026786974
2 T                               
processing 2 T                               
dump_vol_profile : rho_icrf picrf_totals 13413338.15804242
3 Kr                              
processing 3 Kr                              
dump_vol_profile : rho_icrf picrf_totals 0.0
dump_vol_profile : rho_lhrf pilh 0.0
dump_vol_profile : rho_nbi tqbe 0.0
dump_vol_profile : rho_nbi tqbi 0.0
dump_vol_profile : rho_nbi tqbjxb 0.0
dump_vol_profile : rho_nbi tqbth 0.0
dump_vol_profile : rho_nbi sbedep 0.0
dump_vol_profile : rho_nbi sbehalo 0.0
dump_vol_profile : rho sn_trans 0.0
dump_vol_profile : rho_rad prad 0.0
dump_vol_profile : rho pohme 0.0
/global/common/software/atom/perlmutter/binaries/fastran/default/xfastran_ver1.00_ser
ncpu =  1
n1d  =  1
nky  =  1
[1, 1, 36]
['D', 'T', 'Kr']
ion D
ion T
imp Kr
nspec_th = 3
Icurt=1.000e+01MA
Icurr_bootstrap=1.690e+00MA
Icurr_ohmic=0.000e+00MA
rho_fus pfuse 100 100
integrated :  39167956.85624817
rho_fus pfusi 100 100
integrated :  11212520.461233588
model_beam = 0
density_model = 1: impurity = f*ne
TR step finished

========================================================================
= fastran driver: iteration number =  8

IC step
toric.step() called
cur_state_file =  s000001.00001
('Total IC power = ', 20000000.0)
power =  20000000.0
 using s000001.00001 as default state.
  ps_init_tag: Plasma State v2.055 f90 module initialization.
 Prepare toric input reading machine.inp
 ps%ns(1,0)   2.7622773930000001E+020
 <n_e(m-3)-PS> =   1.9354247006679902E+020
 <n_e(m-3)-Interpolated> =   1.9448326134245720E+020
 Thermal ion name, A, Z, dens, temp = 
 D           2           1   1.2404694170583556E+020   17.991627423093085     
 Thermal ion name, A, Z, dens, temp = 
 T           3           1   1.2404694170583556E+020   17.991627423093085     
 Thermal ion name, A, Z, dens, temp = 
 Kr          83          36   7.8149599689802483E+017   17.991627423093085     
 Fast ion name, A, Z = D_beam           2           1
 Fast ion name, A, Z = He4_fusn           4           2
('prepare_eqdsk', '/global/common/software/atom/perlmutter/binaries/geqxpl/default/geqxpl', 'g000001.00001')
Note: The following floating-point exceptions are signalling: IEEE_UNDERFLOW_FLAG IEEE_DENORMAL
  
  G-EQdsk data accepted, maximum rel. GS error:    5.5409808679806070E-002
  
  Bphi is counter-clockwise viewed from above (nsnccwb = 1)
  
  Jphi is counter-clockwise viewed from above (nsnccwi = 1)
  
 equigs_write completion code (0=normal):           0
('toric processors = ', '24')
  -- get (restore) plasma state from file -- 
 process_toric_output: cur_state_file = s000001.00001
  ps_init_tag: Plasma State v2.055 f90 module initialization.
 freq_ic, picrf  alloc? T T
 RF alloc? T         600
    number of icrf sources =            1
    number of species =            5           3
 process toric output: profile and spec sizes:
 toric mesh, PS mesh         459         101
 toric species, PS species counts           5           3
 powers in percent
 total:   100.00000000000000     
 electron total   26.990429197873294        5.7404432281405313     
 ion totals fundamental   5.5135562427297818E-003   0.0000000000000000        0.0000000000000000        0.0000000000000000        0.0000000000000000     
 ion totals harmonic   0.0000000000000000        67.263614017743450        0.0000000000000000        0.0000000000000000        0.0000000000000000     
    number of thermal species (ps%nspec_th) =            3
    number of icrf sources (ps%nicrf_src) =            1
 ps%freq_ic =    0.0000000000000000     
 ps%icrf_src_name = IC00                            
 ps%power_ic =    20000000.000000000     
 ICRF Power   20000000.000000000     
   --storing toric data in current plasma state
 Total FW Driven Current (A)   71603.760395670004     
 Total ICRF Power (W)   20000000.000000000     
 FWCD Effciency (A/W)   3.5801880197835001E-003
 Total FW Driven Current from each source-> Interpolated (A)   71603.760395669931     
 Total FW Driven Current from all sources -> Interpolated (A)   71603.760395669931     
  *ps_update_file_write: normal exit,            5  update elements written.
 Stored Partial RF Plasma State
 electron power, integral
   6545874.2531298883      Watts
 FW ion power, integral
   13454125.746869128      Watts
('merged TORIC plasma state data ', '/pscratch/sd/h/hswils/github_repos/MANTA_DBSCANS/paux_scan/SCAN/simulation_300831_0000/work/rf_ic_toric_8/RF_IC_s000001.00001')
IC step finished
EQ step
>>> efit.step() started
INPUT: PRESSURE found kinetic , mapped value =  kinetic
INPUT: RELAX_PROFILE not found, use default value: 0
INPUT: RELAX_METRIC not found, use default value: 0.5
INPUT: BETAN_TARGET not found, use default value: -1.0
model_pressure = kinetic
betan = 1.188916555027169
INPUT: TOPOLOGY found DN , mapped value =  DN
INPUT: ERROR not found, use default value: 1.0e-4
INPUT: MAX_EFIT_ERROR not found, use default value: 0.1
init_run_step = 0
niter =  10
*** generate kfile 0
r0 = 4.55
b0 = 11.0
ip = 9999999.995
ip, ip cal, ip/(ip cal) = 10.000 10.003 1.000
weigting upper xpoint: [2, 3, 4, 5]
weigting lower xpoint: [9, 10, 11, 12]
run efit
efit, subprocess
elapsed time =  0.339  1.136
error_efit = 9.225e-05
*** generate kfile 1
apply underrelaxation
r0 = 4.55
b0 = 11.0
ip = 9999999.995
inmtric under-relax: 0.5
ip, ip cal, ip/(ip cal) = 10.000 10.000 1.000
weigting upper xpoint: [2, 3, 4, 5]
weigting lower xpoint: [9, 10, 11, 12]
diff_p = 9.753912056082679e-05
diff_f = 0.00011056918851553285
converged
Icurt=9.997e+00MA
EQ step finished
TR step
fastran.step() entered
update_next = disabled
update_instate =  True
[1, 1, 36]
['D', 'T', 'Kr']
ion D
ion T
imp Kr
model_beam = 0
dump_vol_profile : rho_nbi pbe 0.0
dump_vol_profile : rho_nbi pbi 0.0
dump_vol_profile : rho_nbi pbth 0.0
dump_vol_profile : rho_nbi pbth 0.0
dump_vol_profile : rho_fus pfuse 39167956.85624817
dump_vol_profile : rho_fus pfusi 11212520.461233588
dump_vol_profile : rho_fus pfusth 0.0
dump_vol_profile : rho_ecrf peech 0.0
dump_vol_profile : rho_icrf picrf_totals 6545874.253129888
dump_vol_profile : rho_lhrf pelh 0.0
S_name =  ['e                               ' 'D                               '
 'T                               ' 'Kr                              ']
0 e                               
1 D                               
processing 1 D                               
dump_vol_profile : rho_icrf picrf_totals 1364.4115886854022
2 T                               
processing 2 T                               
dump_vol_profile : rho_icrf picrf_totals 13452761.335280437
3 Kr                              
processing 3 Kr                              
dump_vol_profile : rho_icrf picrf_totals 0.0
dump_vol_profile : rho_lhrf pilh 0.0
dump_vol_profile : rho_nbi tqbe 0.0
dump_vol_profile : rho_nbi tqbi 0.0
dump_vol_profile : rho_nbi tqbjxb 0.0
dump_vol_profile : rho_nbi tqbth 0.0
dump_vol_profile : rho_nbi sbedep 0.0
dump_vol_profile : rho_nbi sbehalo 0.0
dump_vol_profile : rho sn_trans 0.0
dump_vol_profile : rho_rad prad 0.0
dump_vol_profile : rho pohme 0.0
/global/common/software/atom/perlmutter/binaries/fastran/default/xfastran_ver1.00_ser
ncpu =  1
n1d  =  1
nky  =  1
